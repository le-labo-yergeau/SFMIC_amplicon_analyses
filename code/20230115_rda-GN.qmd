---
title: "RDA Gram Negative"
format:
  html:
    theme: spacelab
    toc: true
    number-sections: true
    digits: 3
---


```{r}
pacman::p_load(pacman, here, BiodiversityR, tictoc, tidyverse, V8)
```

# Load data for RDA gn      

## Metadata
### Load Metadata - plant morphology - phenanthrene - qPCR
```{r Metadata - data sets loading}
meta.morpho.phe <- read.csv(file = here::here("data","meta.otu.june2020.txt"), dec = ".", header = T, sep = "\t", comment.char = "", row.names = 1) #load
# Upper case rownames 
rownames(meta.morpho.phe) <- toupper(rownames(meta.morpho.phe))
#meta.morpho.phe$code <- stringr::str_replace_all(meta.morpho.phe$code, '[_]', '.')
meta.morpho.phe.b.keep <- meta.morpho.phe$compartment == "bulk"
meta.morpho.phe.r.keep <- meta.morpho.phe$compartment == "rhizo"
meta.morpho.phe.b <- meta.morpho.phe[meta.morpho.phe.b.keep,]
meta.morpho.phe.r <- meta.morpho.phe[meta.morpho.phe.r.keep,]
meta.morpho.phe <- rbind(meta.morpho.phe.b,meta.morpho.phe.r) # keep only bulk and rhizosphere samples
```

### Recode variables
```{r Metadata - recode}
meta.morpho.phe$contamination <- as.factor(meta.morpho.phe$contamination)
meta.morpho.phe$compartment <- as.factor(meta.morpho.phe$compartment)
meta.morpho.phe$diversity_status <- as.factor(meta.morpho.phe$diversity_status)
meta.morpho.phe$diversity_status = factor(meta.morpho.phe$diversity_status, 
                                      levels = c("O", "C", "N", "E", "CN", "CE", "EN", "CEN"),
                                      labels = c("BF", "C", "N", "E", "CN", "CE", "EN", "CEN"))
```

### Keep only needed variables for the rda
```{r Metadata - keep variables}
meta.morpho.phe$ver <- NULL
meta.morpho.phe$col <- NULL
meta.morpho.phe$nem <- NULL
meta.morpho.phe$treatment <- NULL
meta.morpho.phe$cont.comp <- NULL
meta.morpho.phe$block <- NULL
meta.morpho.phe$pot.number <- NULL
meta.morpho.phe$pah.rhd.gp.c <- NULL
meta.morpho.phe$pah.rhd.gn.c <- NULL
meta.morpho.phe$branch <- NULL
meta.morpho.phe$fw_aerial = NULL
meta.morpho.phe$dw_aerial = NULL
meta.morpho.phe$dw_root = NULL
meta.morpho.phe$RSR = NULL
meta.morpho.phe$height = NULL
meta.morpho.phe$phe.b = NULL
meta.morpho.phe$phe.r = NULL
meta.morpho.phe$phe.total = NULL
meta.morpho.phe$pah.rhd.gp.b = NULL
meta.morpho.phe$pah.rhd.gp.r = NULL
meta.morpho.phe$pah.rhd.gn.b = NULL
meta.morpho.phe$pah.rhd.gn.r = NULL
```


### Tidy up
```{r Metadata - tidy up}
rm(meta.morpho.phe.b)
rm(meta.morpho.phe.r)
rm(meta.morpho.phe.b.keep)
rm(meta.morpho.phe.r.keep)
```

### Filter out incomplete cases
```{r filter out incomplete cases}
meta.morpho.phe <- meta.morpho.phe[complete.cases(meta.morpho.phe), ] # Down from 192 to 188 cases #188?
```

### Test for autocorrelation of variables
```{r autocorrelations}
autocorrelations =  (cor(meta.morpho.phe[, c( 'biomass', 'phe', 'gn.copies.g.soil', 'gp.copies.g.soil')], method = "spearman"))
```

## gn

```{r gn - data sets loading}
#### ----------------- gn - General community --------------------------------- 
rawgn <- read.csv(file = here::here("data", "gn_br_otu_table_filtered.txt"), dec = ".", sep = "\t", header = T, row.names = 1, comment.char = "")
```

### Recode community
```{r gn - recode community}
samplenames <- colnames(rawgn) #  sample names to be changed
goodsamplenames <- samplenames %-% '[X]'# erase the X added by R 
goodsamplenames <- stringr::str_replace_all(goodsamplenames, '_GN', '') # remove specific string of characters _GN
goodsamplenames <- stringr::str_replace_all(goodsamplenames, '[.]', '_') # remove all dots and substitute by _
goodsamplenames # check did it work?
colnames(rawgn) <- goodsamplenames #change old colnames for good colnames
dim(rawgn) #check dimensions: 2818 obs of 191 variables
```

### Tidy up
```{r gn - Tidy intermediate objs}
rm(goodsamplenames)
rm(samplenames) # erases junk intermediate data to prevent future problems
```

# Curing community
## Taxonomy table
### Select taxonomy column
```{r gn - Curing taxonomy data tables}
taxonomy.gn <- as.data.frame(rawgn[,ncol(rawgn)]) # taxonomy from last column as independent table
rownames(taxonomy.gn) <- rownames((rawgn)) # keep ASV numbers
check.datasets(taxonomy.gn, rawgn) # Check if numbers the same
rownames(rawgn) <- paste("ASV",rownames(rawgn),sep = "_")# modify ASV names
rownames(taxonomy.gn) <- paste("ASV",rownames(taxonomy.gn),sep = "_") # modify ASV names
check.datasets(taxonomy.gn, rawgn) # Check if numbers the same
```

### Separate taxonomic levels in taxonomy table
```{r gn - Curing taxonomy data tables}
colnames(taxonomy.gn) <- c("Taxonomy") # Rename taxonomy column
# separate taxonomic groups in variables ----
tax.clean <- separate(taxonomy.gn, Taxonomy, into = c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species", "Strain"), sep = ";")
tax.clean <- tax.clean[,-which(names(tax.clean) %in% c("Species", "Strain"))]
tax.clean <- as.data.frame(tax.clean)
as.factor(tax.clean$Domain) # 1 Domain - Bacteria : see if there is contamination with chloroplast
as.factor(tax.clean$Phylum) # 3 Phyla: Deinnococcus-Thermus, Firmicutes and Proteobacteria
as.factor(tax.clean$Class) # 5 classes: Alphaproteobacteria, Bacilli, Betaproteobacteria, Deinococci and Gammaproteobacteria
as.factor(tax.clean$Order) # 13 orders
as.factor(tax.clean$Family) # 17 Families
as.factor(tax.clean$Genus) # 22 genus
str(tax.clean)
```

### Eliminate uninformative characters
```{r gn - Curing taxonomy data tables}
# eliminate the characters one by one or all using stringr package -----
tax.clean$Domain <- stringr::str_replace(tax.clean$Domain,'[k]', '')
tax.clean$Domain <- stringr::str_replace_all(tax.clean$Domain,'[__]', '')
tax.clean$Phylum <- stringr::str_replace(tax.clean$Phylum,'[p__]', '')
tax.clean$Phylum <- stringr::str_replace_all(tax.clean$Phylum,'[__]', '')
tax.clean$Class <- stringr::str_replace(tax.clean$Class,'[c__]', '')
tax.clean$Class <- stringr::str_replace_all(tax.clean$Class,'[__]', '')
tax.clean$Order <- stringr::str_replace(tax.clean$Order, '[o]', '')
tax.clean$Order <- stringr::str_replace_all(tax.clean$Order, '[__]', '')
tax.clean$Family <- stringr::str_replace(tax.clean$Family, '[f]', '')
tax.clean$Family <- stringr::str_replace_all(tax.clean$Family, '[__]', '')
tax.clean$Genus <- stringr::str_replace(tax.clean$Genus, '[g]','')
tax.clean$Genus <- stringr::str_replace_all(tax.clean$Genus, '[__]', '')
str(tax.clean)
```

### Collate clean tax to community
```{r gn - Curing taxonomy data tables}
# collate otus with clean taxonomy table
rawgn_bis <- cbind(rawgn[,1:(ncol(rawgn)-1)], tax.clean) # select all columns except last one with unclean tax
# tyding up
rm(taxonomy.gn)
```

## Community  matrix
### Transpose community matrix
```{r gn -  Preparing  abundance matrix, ordering tables}
tax.clean.gn <- tax.clean # working file for taxonomy
comgn <- rawgn[,!names(rawgn) %in% c('taxonomy')] # create community table with asv table with only abundances not taxonomy
comgn.t <- t(comgn) # transposing table, samples as rows, species as columns to match metadata
```
### Inner-join with meta.morpho.phe
Keep community samples that match environmental samples
```{r}
comgn.t.filtered <- same.sites(comgn.t, meta.morpho.phe) #Resulting sites without species:  PHE_C_2_BULK 0_EN_5_BULK
check.datasets(comgn.t.filtered, meta.morpho.phe) # check row names are the same
```

Erase rows in com16.t.filtered and meta.morpho.phe that do not have species: PHE_C_2_BULK 0_EN_5_BULK
```{r}
rows.to.remove = c("PHE_C_2_BULK", "0_EN_5_BULK")
dim(comgn.t.filtered) #188 15192
comgn.t.filtered = comgn.t.filtered[!rownames(comgn.t.filtered) %in% rows.to.remove,]
dim(comgn.t.filtered) #186 15192
# Same with environmental data
meta.morpho.phe = meta.morpho.phe[!rownames(meta.morpho.phe) %in% rows.to.remove,]
check.datasets(comgn.t.filtered, meta.morpho.phe)
```

# RDA steps
## Standardize 
```{r}
meta.z = meta.morpho.phe |> mutate_if(is.numeric,scale)
```

## Run RDA model
```{r}
#db-RDA Function dbrda does not provide species weights because it uses a distance matrix
comgn.bray = vegdist(comgn.t.filtered, method = 'bray') # use comgn.t.filtered instead of comgn.hell to match data in PCoA and perMANOVA.
dbrda.gn = dbrda(comgn.bray ~ contamination + compartment + diversity_status + biomass + phe + gn.copies.g.soil + gp.copies.g.soil, data = meta.z, 
               scaling = "species")
RsquareAdj(dbrda.gn)
anova.rda.gn = anova.cca(dbrda.gn, step = 999, by = "term")
anova.rda.gn
capture.output(anova.rda.gn, file = here::here("output", "tables", "gn", "anova-dbrda-gn.txt"))
capture.output(summary(dbrda.gn), file = here::here("output", "tables", "gn", "summary-dbrda-gn.txt"))
#summary(dbrda.gn)
```
