---
title: "Main analyses SFMIC 2023 05 08"
author: "Sara Correa-Garcia"
format: html
editor: source
---

# ----------------------------------------------
# SETUP
# ----------------------------------------------

# Load packages

```{r}
pacman::p_load(pacman, agricolae, here, BiodiversityR, export,otuSummary, tictoc, tidyverse, V8)
```

# ----------------------------------------------
# 1. PLANT-PHEN ANALYSIS
# ----------------------------------------------

# Load data

### Load Metadata

plant morphology - phenanthrene - qPCR

```{r Metadata - data sets loading}
meta = read.csv(file = here::here("data","meta.otu.june2020.txt"), dec = ".", header = T, sep = "\t", comment.char = "", row.names = 1) #load
```

# Wrangle data

### Select bulk and rhizo

```{r}
# Upper case rownames 
rownames(meta) = toupper(rownames(meta))
#meta$code = stringr::str_replace_all(meta$code, '[_]', '.')
meta.b.keep = meta$compartment == "bulk"
meta.r.keep = meta$compartment == "rhizo"
meta.b = meta[meta.b.keep,]
meta.r = meta[meta.r.keep,]
meta = rbind(meta.b,meta.r) # keep only bulk and rhizosphere samples
#tidy
rm(meta.b.keep)
rm(meta.r.keep)
rm(meta.b)
rm(meta.r)
```

### Recode variables

```{r Metadata - recode}
meta$contamination = factor(meta$contamination, 
                                      levels = c("control", "phenanthrene"),
                                      labels = c("CTRL", "PHE"))
meta$compartment = as.factor(meta$compartment)
meta$diversity_status = factor(meta$diversity_status, 
                                      levels = c("O", "CEN", "C", "N", "E", "CE", "CN", "EN"),
                                      labels = c("BF", "CEN", "C", "N", "E", "CE", "CN", "EN"))
meta$nem = as.factor(meta$nem)
meta$col = as.factor(meta$col)
meta$ver = as.factor(meta$ver)
meta$block = as.factor(meta$block)
```

### Select variables of interest

```{#r}
variables = c("compartment", "contamination", "diversity_status", "fw_aerial", "biomass", "height", "phe", "block")
meta1 = meta[which(names(meta) %in% variables)]
```

## Keep Rhizosphere samples

for morphological analysis

```{r}
meta.r.keep = meta$compartment == "rhizo"
meta.r = meta[meta.r.keep,]

#meta.r$contamination = as.character(meta.r$contamination)
#meta.r$diversity_status = as.character(meta.r$diversity_status)
```

## Calculate mean and sd table

for morphological variables

```{r}
cols = c("diversity_status", "contamination")
morpho.means = meta.r |> 
  dplyr::group_by(across(all_of(cols))) |> 
   dplyr::summarize(across(
                           .cols = c("fw_aerial", "biomass", "height"),
                           .fns = list( mean = mean, std = sd)
                            )) |> 
   mutate_if(is.numeric, round, digits = 3)
#capture.output(morpho.means, file = here::here("output23", "tables", "morphological-summary-mean-std.csv"))
```

# Linear Models - ANOVA and Posthoc

on morphological variables

Create a treatment variable for posthocs

```{r}
meta.r$treatment = as.factor(paste0(meta.r$diversity_status,".",meta.r$contamination))
meta.r$treatment = factor(meta.r$treatment, levels = c("BF.CTRL", "BF.PHE", "CEN.CTRL", "CEN.PHE", "C.CTRL", "C.PHE", "N.CTRL", "N.PHE", "E.CTRL", "E.PHE", "CE.CTRL", "CE.PHE", "CN.CTRL", "CN.PHE", "EN.CTRL", "EN.PHE"))
```

## Aerial

Normality and Homoscedasticity

```{r}
shapiro.test(meta.r$fw_aerial) # W = 0.9796, p-value = 0.141
kruskal.test(fw_aerial ~ treatment, data = meta.r) # Kruskal-Wallis chi-squared = 31.07, df = 15, p-value = 0.00859
```

Model and ANOVA
```{r}
mean(meta.r$fw_aerial) # 38.727 g across treatments
lm.aerial.full = lm(fw_aerial~contamination+diversity_status+phe, data = meta.r)
summary(aov(lm.aerial.full)) # residual phe do no affect aerial biomass
lm.aerial.reduced = lm(fw_aerial~contamination+diversity_status, data = meta.r)
summary(aov(lm.aerial.reduced)) # contamination and diversity are significant
summary(lm.aerial.reduced)

#table2spreadsheet(x = lm.aerial.reduced, file = here::here("output23", "tables", "Suppl_table_2"), type = "XLS", append = TRUE, sheetName = "fwshoot-estim", digits = 2, add.rownames = TRUE)

#table2spreadsheet(x = summary(aov(lm.aerial.reduced)), file = here::here("output23", "tables", "Suppl_table_2"), type = "XLS", append = TRUE, sheetName = "fwshoot-aov", digits = 2, add.rownames = TRUE)
```

Tukey post-hoc. Factors as one group
```{r}
aov.aerial = aov(fw_aerial~treatment, data = meta.r)
summary(aov.aerial)
tukey_aov.aerial_lili = HSD.test(aov.aerial, "treatment", group = TRUE)
tukey_aov.aerial_lili

#table2spreadsheet(x = tukey_aov.aerial_lili$groups, file = here::here("output23", "tables", "Suppl_table_2"), type = "XLS", append = TRUE, sheetName = "fwshoot-tukey", digits = 2, add.rownames = TRUE)
```

Extract tukey groups and reorder to match levels in treatment and attach to mean and sd summary table.

```{r}
aerial_letters = as.data.frame(tukey_aov.aerial_lili$groups)
aerial_letters$treatment = factor(rownames(aerial_letters),
                                  levels = c("BF.CTRL", "BF.PHE", "CEN.CTRL", "CEN.PHE", "C.CTRL", "C.PHE", "N.CTRL", "N.PHE", "E.CTRL", "E.PHE", "CE.CTRL", "CE.PHE", "CN.CTRL", "CN.PHE", "EN.CTRL", "EN.PHE"))
```

### Biomass

Normality and Homoscedasticity

```{r}
shapiro.test(meta.r$biomass) # W = 0.9678, p-value = 0.0185
kruskal.test(biomass ~ treatment, data = meta.r) # Kruskal-Wallis chi-squared = 27.65, df = 15, p-value = 0.0239
```

Model and ANOVA

```{r}
mean(meta.r$biomass) # 14.911 g across treatments
lm.biomass.full = lm(biomass~contamination+diversity_status+phe, data = meta.r)
summary(aov(lm.biomass.full)) # contamination is significant, but not diversity or residual phe
summary(lm.biomass.full)
lm.biomass.reduced = lm(biomass~contamination+diversity_status, data = meta.r)
summary(aov(lm.biomass.reduced)) # Only contamination significant, although some 
summary(lm.biomass.reduced)

#table2spreadsheet(x = lm.biomass.reduced, file = here::here("output23", "tables", "Suppl_table_2"), type = "XLS", append = TRUE, sheetName = "biomass-estim", digits = 2, add.rownames = TRUE)

#table2spreadsheet(x = summary(aov(lm.biomass.reduced)), file = here::here("output23", "tables", "Suppl_table_2"), type = "XLS", append = TRUE, sheetName = "biomass-aov", digits = 2, add.rownames = TRUE)
```

Tukey post-hoc

Factors as one group

```{r}
aov.biomass = aov(biomass~treatment, data = meta.r)
summary(aov.biomass)
tukey_aov.biomass_lili = HSD.test(aov.biomass, "treatment", group = TRUE)
tukey_aov.biomass_lili

#table2spreadsheet(x = tukey_aov.biomass_lili$groups, file = here::here("output23", "tables", "Suppl_table_2"), type = "XLS", append = TRUE, sheetName = "biomass-tukey", digits = 2, add.rownames = TRUE)
```

Extract tukey groups and reorder to match levels in treatment and attach to mean and sd summary table.

```{r}
biomass_letters = as.data.frame(tukey_aov.biomass_lili$groups)
biomass_letters$treatment = factor(rownames(biomass_letters),
                                  levels = c("BF.CTRL", "BF.PHE", "CEN.CTRL", "CEN.PHE", "C.CTRL", "C.PHE", "N.CTRL", "N.PHE", "E.CTRL", "E.PHE", "CE.CTRL", "CE.PHE", "CN.CTRL", "CN.PHE", "EN.CTRL", "EN.PHE"))
```

### Height

Normality and Homoscedasticity

```{r}
shapiro.test(meta.r$height) # W = 0.9658, p-value = 0.0132
kruskal.test(height ~ treatment, data = meta.r) # Kruskal-Wallis chi-squared = 27.12, df = 15, p-value = 0.0277
```

ANOVA

```{r}
mean(meta.r$height) # 89.807 cm across treatments
lm.height.full = lm(height~contamination+diversity_status+phe, data = meta.r)
summary(aov(lm.height.full)) # only contamination has an effect
lm.height.reduced = lm(height~contamination+diversity_status, data = meta.r)
summary(aov(lm.height.reduced)) # only contamination has an effect
summary(lm.height.reduced)
#table2spreadsheet(x = lm.height.reduced, file = here::here("output23", "tables", "Suppl_table_2"), type = "XLS", append = TRUE, sheetName = "height-estim", digits = 2, add.rownames = TRUE)
#table2spreadsheet(x = summary(aov(lm.height.reduced)), file = here::here("output23", "tables", "Suppl_table_2"), type = "XLS", append = TRUE, sheetName = "height-aov", digits = 2, add.rownames = TRUE)
```

Tukey post-hoc Factors as one group

```{r}
aov.height = aov(height~treatment, data = meta.r)
summary(aov.height)
tukey_aov.height_lili = HSD.test(aov.height, "treatment", group = TRUE)
tukey_aov.height_lili
#capture.output(tukey_aov.height_lili$groups, file = here::here("output", "tables", "willow","Tukey_height.txt"))
#table2spreadsheet(x = tukey_aov.height_lili$groups, file = here::here("output23", "tables", "Suppl_table_2"), type = "XLS", append = TRUE, sheetName = "height-tukey", digits = 2, add.rownames = TRUE)
```

Extract tukey groups and reorder to match levels in treatment and attach to mean and sd summary table.
```{r}
height_letters = as.data.frame(tukey_aov.height_lili$groups)
height_letters$treatment = factor(rownames(height_letters),
                                  levels = c("BF.CTRL", "BF.PHE", "CEN.CTRL", "CEN.PHE", "C.CTRL", "C.PHE", "N.CTRL", "N.PHE", "E.CTRL", "E.PHE", "CE.CTRL", "CE.PHE", "CN.CTRL", "CN.PHE", "EN.CTRL", "EN.PHE"))
```

## Attach letters to table

First, sort by group level and then create a vector with the arranged values.

```{r}
height_letters = height_letters |> arrange(treatment)
height_letters = height_letters$groups
biomass_letters = biomass_letters |> arrange(treatment)
biomass_letters = biomass_letters$groups
aerial_letters = aerial_letters |> arrange(treatment)
aerial_letters = aerial_letters$groups
```

Attach the vectors with corresponding arranged letter values.

```{r}
# After calculating posthocs, add vector with letters at corresponding location in morpho.phe
morpho.means = add_column(morpho.means, L = aerial_letters, .after = "fw_aerial_std")
morpho.means = add_column(morpho.means, L1 = biomass_letters, .after = "biomass_std")
morpho.means = add_column(morpho.means, L2 = height_letters, .after = "height_std")
```

## Export Summary Table 1

```{r}
#write.csv(morpho.means, file = here::here("output", "tables", "willow","morpho_means_sd_tukey-letters.csv"), row.names = F) # Give format to this table in Word. https://www.rforecology.com/post/exporting-tables-from-r-to-microsoft-word/?fbclid=IwAR02TRG7eQtUF7564qPiBkB9FdvXtQH7bOr_3fx22Kxzgn1cNmtCmqgqxtQ
#table2spreadsheet(x = morpho.means, file = here::here("output23", "tables", "Table_1_morpho-mean-sd-tukey-letters"), type = "XLS", append = TRUE, sheetName = "summary", digits = 2, add.rownames = TRUE)

```

# ----------------------------------------------

# PHENANTHRENE

## Keep contaminated samples

```{r}
meta.phe.keep = meta$contamination == "PHE"
meta.phe = meta[meta.phe.keep,]
#rm(meta)
```

## Filter outliers

Sample PHE_E\_1_BULK and PHE_0\_1_BULK

```{r}
meta.phe$code = row.names(meta.phe) # put codes on column to select based on sample name
meta.phe.out <- meta.phe$code != "PHE_E_1_BULK"
meta.phe.out <- meta.phe[meta.phe.out,]
meta.phe.keep <- meta.phe.out$code != "PHE_0_1_BULK"
meta.phe.out <- meta.phe.out[meta.phe.keep,]
```

## Jitter figure

With same colors as in gn and gp genes

```{r boxplot jitter -GN - color}
# Code Colors
CPCOLS <- c("#DCDCDC",  "#707070",  "#1874CD", "#FF0000",  "#FFFF00", "#458B00",   "#68228B", "#FFA500")
# Code Compartment factor to show full comparment name
meta.phe.out$compartment = factor(meta.phe.out$compartment, levels = c("bulk", "rhizo"), labels = c("Bulk", "Rhizosphere"))
phe_jitter_color = ggplot(meta.phe.out, aes( x = diversity_status, y = phe, fill = diversity_status)) +
   geom_boxplot(width = 0.4, alpha = 0.8) +
    geom_jitter(aes(color = diversity_status), size = 1.5, alpha = 1, width = 0.4) +
   geom_boxplot(width = 0.4, alpha = 0.8) +
   theme_cowplot() +
   theme(
      legend.position = "none", 
      plot.title = element_text(face = "bold", size = 16), 
      axis.text.x = element_text(size = 10, hjust = 1, angle = 45), 
      axis.text.y = element_text(size = 12, hjust = 1, angle = 45), 
      axis.title.y = element_text(size = 12, face = "bold"),
      axis.title.x = element_text(size = 12, face = "bold"),
      strip.text = element_text(size = 16, face = "bold")
         ) + 
   scale_fill_manual(values = CPCOLS) +
   scale_colour_manual(values = CPCOLS) +
   ylab("mg/kg phenanthrene") +
   xlab("Soil fauna-microbial interactions complexity (SFMIC)") +
   

phe_jitter_color

ggsave(file = here::here("output", "figures", "phenanthrene_jitter-boxplot.svg"), phe_jitter_color, height = 7, width = 9, units = "in") # Open in inkscape and save as .eps because Warning message: In grid.Call.graphics(C_polygon, x$x, x$y, index) :semi-transparency is not supported on this device: reported only once per page. No color for boxplots.
ggsave(file = here::here("output", "figures", "phenanthrene_jitter-boxplot.tiff"), phe_jitter_color, height = 7,  width = 9, units = "in")
ggsave(file = here::here("output", "figures", "phenanthrene_jitter-boxplot.pdf"), phe_jitter_color, height = 7,  width = 9, units = "in")
```

## ANOVA and Posthoc PHE

On phenanthrene at the end of the experiment

### Create a treatment variable

```{r}
meta.phe.out$diversity_status = factor(meta.phe.out$diversity_status, 
                                      levels = c("BF", "CEN", "C", "N", "E", "CE", "CN", "EN"),
                                      labels = c("BF", "CEN", "C", "N", "E", "CE", "CN", "EN"))
meta.phe.out$compartment = factor(meta.phe.out$compartment, levels = c("bulk", "rhizo"), labels = c("BULK", "RHIZO"))
meta.phe.out$treatment = as.factor(paste0(meta.phe.out$diversity_status,".",meta.phe.out$compartment))
meta.phe.out$treatment = factor(meta.phe.out$treatment, levels =  c("BF.BULK", "BF.RHIZO", "CEN.BULK", "CEN.RHIZO", "C.BULK", "C.RHIZO", "N.BULK", "N.RHIZO", "E.BULK", "E.RHIZO", "CE.BULK", "CE.RHIZO", "CN.BULK", "CN.RHIZO", "EN.BULK", "EN.RHIZO"))

```

### Assumptions

Calculated on the log10 base of phenanthrene values, minus the 2 outliers PHE.E.1.Bulk and PHE.0.1.Bulk

```{r}
hist(log10(meta.phe.out$phe), breaks = 15) # Visualize data
shapiro.test(log10(meta.phe.out$phe)) #W = 0.90798, p-value = 6.9e-06
bartlett.test(log10(meta.phe.out$phe), meta.phe.out$treatment) # Bartlett's K-squared = 22.715, df = 15, p-value = 0.09039
qqnorm(log10(meta.phe.out$phe))
qqline(log10(meta.phe.out$phe))
```

### ANOVA test

```{r}
modeloanova_phe <- lm(phe ~ compartment + diversity_status, data = meta.phe.out)
summary(aov(modeloanova_phe))
summary(modeloanova_phe)
#table2spreadsheet(x = modeloanova_phe, file = here::here("output23", "tables", "Suppl_table_2"), type = "XLS", append = TRUE, sheetName = "phe-estim", digits = 2, add.rownames = TRUE)
#table2spreadsheet(x = summary(aov(modeloanova_phe)), file = here::here("output23", "tables", "Suppl_table_2"), type = "XLS", append = TRUE, sheetName = "phe-aov", digits = 2, add.rownames = TRUE)
```

### Tukey

```{r}
tx <- with(meta.phe.out, interaction(meta.phe.out$diversity_status, meta.phe.out$compartment))
modeloanova_phe <- aov(phe~tx, data = meta.phe.out) # Use untransformed variable to get groups by raw value
summary(modeloanova_phe)
tukey_phe_lili <- agricolae::HSD.test(modeloanova_phe, "tx", group = TRUE)
tukey_phe_lili
capture.output(tukey_phe_lili, file = here::here("output", "tables", "phenanthrene","tukeyBYgroup_phenanthrene.csv"))
```

## Calculate mean and sd table

for morphological variables

```{r}
cols = c("diversity_status", "compartment")
phe.means = meta.phe.out |> 
   tidyr::drop_na(phe) |> 
   dplyr::group_by(across(all_of(cols))) |> 
   dplyr::summarize(across(
                           .cols = c("phe"),
                           .fns = list( mean = mean, std = sd)
                            )) |> 
   mutate_if(is.numeric, round, digits = 3)
capture.output(phe.means, file = here::here("output", "tables", "phenanthrene","mean_sd_phenanthrene.csv"))
```

# ----------------------------------------------
# 2. MICROBIAL COM ANALYSIS
# ----------------------------------------------

# Load data and basic wrangle
### Metadata
```{r}
# loading Metadata - plant morphology - phenanthrene - qPCR ----
meta.morpho.phe <- read.csv(file = here("data","meta.otu.june2020.txt"), dec = ".", header = T, sep = "\t", comment.char = "") #load
```

Clean metadata
```{r}
meta.morpho.phe$code <- stringr::str_replace_all(meta.morpho.phe$code, '[_]', '.')
meta.morpho.phe.b.keep <- meta.morpho.phe$compartment == "bulk"
meta.morpho.phe.r.keep <- meta.morpho.phe$compartment == "rhizo"
meta.morpho.phe.b <- meta.morpho.phe[meta.morpho.phe.b.keep,]
meta.morpho.phe.r <- meta.morpho.phe[meta.morpho.phe.r.keep,]
meta.morpho.phe <- rbind(meta.morpho.phe.b,meta.morpho.phe.r) # keep only bulk and rhizosphere samples

# recoding variables ----
meta.morpho.phe$ver <- as.factor(meta.morpho.phe$ver)
meta.morpho.phe$col <- as.factor(meta.morpho.phe$col)
meta.morpho.phe$nem <- as.factor(meta.morpho.phe$nem)
meta.morpho.phe$diversity_status <- as.factor(meta.morpho.phe$diversity_status)
meta.morpho.phe$treatment <- as.factor(meta.morpho.phe$treatment)
meta.morpho.phe$contamination <- as.factor(meta.morpho.phe$contamination)
meta.morpho.phe$compartment <- as.factor(meta.morpho.phe$compartment)
meta.morpho.phe$cont.comp <- as.factor(meta.morpho.phe$cont.comp)
meta.morpho.phe$block <- as.factor(meta.morpho.phe$block)
meta.morpho.phe$pot.number <- as.factor(meta.morpho.phe$pot.number)

meta.morpho.phe$nem.cont <- as.factor(paste(meta.morpho.phe$contamination, meta.morpho.phe$nem, sep = "."))
meta.morpho.phe$nem.comp <- as.factor(paste(meta.morpho.phe$compartment, meta.morpho.phe$nem, sep = "."))
meta.morpho.phe$col.comp <- as.factor(paste(meta.morpho.phe$compartment, meta.morpho.phe$col, sep = "."))
meta.morpho.phe$col.cont <- as.factor(paste(meta.morpho.phe$contamination, meta.morpho.phe$col, sep = "."))
meta.morpho.phe$ver.cont <- as.factor(paste(meta.morpho.phe$contamination, meta.morpho.phe$ver, sep = "."))
meta.morpho.phe$ver.comp <- as.factor(paste(meta.morpho.phe$compartment, meta.morpho.phe$ver, sep = "."))
meta.morpho.phe$div.comp <- as.factor(paste(meta.morpho.phe$compartment, meta.morpho.phe$diversity_status, sep = "."))
meta.morpho.phe$div.cont <- as.factor(paste(meta.morpho.phe$contamination, meta.morpho.phe$diversity_status, sep = "."))
meta.morpho.phe$div.cont.comp <- as.factor(paste(meta.morpho.phe$cont.comp, meta.morpho.phe$diversity_status, sep = "."))
# create treat tablefor relative abundance stuff ----
treat = meta.morpho.phe[,1:10] 
treat2 = meta.morpho.phe[,31:39]
treat = cbind(treat, treat2)
head(treat)

# tyding up ----
to_delete <- c("meta.morpho.phe.b", "meta.morpho.phe.r", "meta.morpho.phe.b.keep", "meta.morpho.phe.r.keep", "treat2")
rm(list = to_delete)
```

### Fungi Feature table
```{r}
#### ----------------- ITS - General community -------------------
obj1.rawits <- read.csv(file = here("data", "ITS_feature_table_filtered.tsv"), dec = ".", sep = "\t", header = T, row.names = 1, comment.char = "")

```

Recode of sample names 
```{r}
samplenames <- colnames(obj1.rawits) #  sample names to be changed
goodsamplenames <- samplenames %-% '[X]'# erase the X added by R 
goodsamplenames <- stringr::str_replace_all(goodsamplenames, '[_]', '.') # code as in meta.morpho.phe
goodsamplenames # check it works
colnames(obj1.rawits) <- goodsamplenames #change the column names for the good names without X
#str(obj1.rawits) #check structure
# tyding up ----
rm(goodsamplenames)
rm(samplenames) # erases junk intermediate data to prevent future problems
```

### Fungi Phylum relative abundance
```{r}
phylum.its <- read.table(file = here("data", "ITS_feature_table_final_rarefied_rel_L2.txt"), header = T, sep = "\t", row.names = 1)
```

Recoding of sample names 
```{r}
samplenames <- colnames(phylum.its) # new object with sample names to be changed
goodsamplenames <- samplenames %-% '[X]'# erase the X added by R at the beggining of the "control" samples.
goodsamplenames <- stringr::str_replace_all(goodsamplenames, '[_]', '.')
goodsamplenames # check it works
colnames(phylum.its) <- goodsamplenames #change the column names
str(phylum.its) #check structure
phylum.its = data.frame(t(phylum.its))
```

### Fungi Class relative abundance
```{r}
class.its <- read.table(file = here("data", "ITS_feature_table_final_rarefied_rel_L3.txt"), header = T, sep = "\t", row.names = 1)
```

Recode sample names
```{r}
samplenames <- colnames(class.its) # new object with sample names to be changed
goodsamplenames <- samplenames %-% '[X]'# erase the X added by R at the beggining of the "control" samples.
goodsamplenames <- stringr::str_replace_all(goodsamplenames, '[_]', '.')
goodsamplenames # check it works
colnames(class.its) <- goodsamplenames #change the column names for the good names without X
str(class.its) #check structure
class.its = data.frame(t(class.its))
```

### Fungi Genus Relative abundance
```{r}
genus.its  <- read.table(file = here("data", "ITS_feature_table_final_rarefied_rel_L6.txt"), header = T, sep = "\t", row.names = 1)
```

Recode sample names
```{r}
samplenames <- colnames(genus.its) 
goodsamplenames <- samplenames %-% '[X]'
goodsamplenames <- stringr::str_replace_all(goodsamplenames, '[_]', '.')
goodsamplenames 
colnames(genus.its) <- goodsamplenames 
str(genus.its) 
genus.its = data.frame(t(genus.its))
# tyding up ----
rm(goodsamplenames)
rm(samplenames) 
```

### Bacteria Feature table
```{r}
#obj1.raw16s <- read.csv(file = here("data", "16s_feature_table_filtered.tsv"), dec = ".", sep = "\t", header = T, row.names = 1, comment.char = "")
#View(obj1.raw16s[1:10, 1:5]) # check if the first column with #feature as loaded as raw names
obj1.raw16s <- read.csv(file = here("data", "16s_feature_table_filtered_No_chloroplast.txt"), dec = ".", sep = "\t", header = T, row.names = 1, comment.char = "")
```

Recode sample names
```{r}
samplenames <- colnames(obj1.raw16s) 
goodsamplenames <- samplenames %-% '[X]'
goodsamplenames <- stringr::str_replace_all(goodsamplenames, '[_]', '.') 
goodsamplenames 
colnames(obj1.raw16s) <- goodsamplenames 
str(obj1.raw16s) 
# tyding up ----
rm(goodsamplenames)
rm(samplenames)
```

### Bacteria Phylum relative abundance
```{r}
phylum.prok <- read.table(file = here("data", "16s_feature_table_final_rarefied_rel_L2_no_chloroplasts.txt"), header = T, sep = "\t", row.names = 1)
```

Recode sample names
```{r}
samplenames <- colnames(phylum.prok) 
goodsamplenames <- samplenames %-% '[X]'
goodsamplenames <- stringr::str_replace_all(goodsamplenames, '[_]', '.')
goodsamplenames 
colnames(phylum.prok) <- goodsamplenames 
str(phylum.prok) 
# tyding up ----
rm(samplenames) 
rm(goodsamplenames)
```

### Bacteria Class relative abundance
```{r}
class.prok <- read.table(file = here("data", "16s_feature_table_final_rarefied_rel_L3.txt"), header = T, sep = "\t", row.names = 1)
```

recode
```{r}
samplenames <- colnames(class.prok) 
goodsamplenames <- samplenames %-% '[X]'# erase the X added by R at the beggining of the "control" samples.
goodsamplenames <- stringr::str_replace_all(goodsamplenames, '[_]', '.')
goodsamplenames # check it works
colnames(class.prok) <- goodsamplenames #change the column names for the good names without X
str(class.prok) #check structure
```

### Bacteria Genus
```{r}
# Loading genus 16S ASV - Relative abundance tables for Stackbars ----
genus.prok <- read.table(file = here("data", "16s_feature_table_final_rarefied_rel_L6_no_chloroplasts.txt"), header = T, sep = "\t", row.names = 1)
```


```{r}
# recoding of sample names ----
samplenames <- colnames(genus.prok) # new object with sample names to be changed
goodsamplenames <- samplenames %-% '[X]'# erase the X added by R at the beggining of the "control" samples.
goodsamplenames <- stringr::str_replace_all(goodsamplenames, '[_]', '.')
goodsamplenames # check it works
colnames(genus.prok) <- goodsamplenames #change the column names for the good names without X
str(genus.prok) #check structure
# tyding up ----
rm(goodsamplenames)
rm(samplenames)
```

#### Transposing relative abundance tables for further analysis
```{r}
phylum.prok <- data.frame(t(phylum.prok))
class.prok <- data.frame(t(class.prok))
genus.prok <- data.frame(t(genus.prok))
# PHE.CEN.4.Rhizo is missing form prokaryotes, thus, eliminate sample for all data sets

```

### GN Feature table
```{r}
obj1.rawgn <- read.csv(file = here("data","gn_bcr_otu_table_filtered.tsv"), dec = ".", sep = "\t", header = T, row.names = 1, comment.char = "", check.names = FALSE)
# recoding of sample names ----
samplenames <- colnames(obj1.rawgn) #  sample names to be changed
goodsamplenames <- samplenames %-% '[X]'# erase the X added by R 
goodsamplenames <- stringr::str_replace_all(goodsamplenames, '[_]', '.') # code as in meta.morpho.phe
goodsamplenames <- stringr::str_replace_all(goodsamplenames, '.GN', '') # code as in meta.morpho.phe
goodsamplenames <- stringr::str_replace_all(goodsamplenames, 'BULK', 'Bulk')
goodsamplenames <- stringr::str_replace_all(goodsamplenames, 'RHIZO', 'Rhizo')
goodsamplenames # check it works
colnames(obj1.rawgn) <- goodsamplenames #change the column names
dim(obj1.rawgn)
```

### GN Phylum relative abundance
```{r}
phylum.gn <- read.table(file = here("data",  "gn_bcr_otu_table_final_rarefied_rel_L2.txt"), header = T, sep = "\t", row.names = 1, check.names = FALSE) #incomplete final line found by readTableHeader on 'GN_otu_table_final_rarefied_rel_L2.txt' ??

# recoding of sample names ----
samplenames <- colnames(phylum.gn) #  sample names to be changed
goodsamplenames <- samplenames %-% '[X]'# erase the X added by R 
goodsamplenames <- stringr::str_replace_all(goodsamplenames, '[_]', '.') # code as in meta.morpho.phe
goodsamplenames <- stringr::str_replace_all(goodsamplenames, '.GN', '') # code as in meta.morpho.phe
goodsamplenames <- stringr::str_replace_all(goodsamplenames, 'BULK', 'Bulk')
goodsamplenames <- stringr::str_replace_all(goodsamplenames, 'RHIZO', 'Rhizo')
goodsamplenames # check it works
colnames(phylum.gn) <- goodsamplenames #change the column names for the good names without X
dim(phylum.gn) #check structure
phylum.gn = data.frame(t(phylum.gn))

```

### GN Class relative abundance
```{r}
class.gn = read.table(file = here("data", "gn_bcr_otu_table_final_rarefied_rel_L3.txt"), header = T, sep = "\t", row.names = 1, check.names = FALSE)
# recoding of sample names ----
samplenames <- colnames(class.gn) #  sample names to be changed
goodsamplenames <- samplenames %-% '[X]'# erase the X added by R 
goodsamplenames <- stringr::str_replace_all(goodsamplenames, '[_]', '.') # code as in meta.morpho.phe
goodsamplenames <- stringr::str_replace_all(goodsamplenames, '.GN', '') # code as in meta.morpho.phe
goodsamplenames <- stringr::str_replace_all(goodsamplenames, 'BULK', 'Bulk')
goodsamplenames <- stringr::str_replace_all(goodsamplenames, 'RHIZO', 'Rhizo')
goodsamplenames # check it works
colnames(class.gn) <- goodsamplenames #change the column names for the good names without X
str(class.gn) #check structure
class.gn = data.frame(t(class.gn))
```

### GN Genus relative abundance
```{r}
genus.gn = read.table(file = here("data", "gn_bcr_otu_table_final_rarefied_rel_L6.txt"), header = T, sep = "\t", row.names = 1, check.names = FALSE)
# recoding of sample names ----
samplenames <- colnames(genus.gn) #  sample names to be changed
goodsamplenames <- samplenames %-% '[X]'# erase the X added by R 
goodsamplenames <- stringr::str_replace_all(goodsamplenames, '[_]', '.') # code as in meta.morpho.phe
goodsamplenames <- stringr::str_replace_all(goodsamplenames, '.GN', '') # code as in meta.morpho.phe
goodsamplenames <- stringr::str_replace_all(goodsamplenames, 'BULK', 'Bulk')
goodsamplenames <- stringr::str_replace_all(goodsamplenames, 'RHIZO', 'Rhizo')
goodsamplenames # check it works
colnames(genus.gn) <- goodsamplenames #change the column names for the good names without X
str(genus.gn) #check structure
genus.gn = data.frame(t(genus.gn))
rm(goodsamplenames)
rm(samplenames)
```

### GP Feature table
```{r}
obj1.rawgp <- read.csv(file = here("data", "gp_bcr_otu_table_filtered.tsv"), dec = ".", sep = "\t", header = T, row.names = 1, comment.char = "", check.names = FALSE)
# recoding of sample names ----
samplenames <- colnames(obj1.rawgp) #  sample names to be changed
goodsamplenames <- samplenames %-% '[X]'# erase the X added by R 
goodsamplenames <- stringr::str_replace_all(goodsamplenames, '[_]', '.') # code as in meta.morpho.phe
goodsamplenames <- stringr::str_replace_all(goodsamplenames, '.GP', '') # code as in meta.morpho.phe
goodsamplenames <- stringr::str_replace_all(goodsamplenames, 'BULK', 'Bulk')
goodsamplenames <- stringr::str_replace_all(goodsamplenames, 'RHIZO', 'Rhizo')
goodsamplenames # check it works
colnames(obj1.rawgp) <- goodsamplenames #change the column names for the good names without X
str(obj1.rawgp) #check structure
```

##GP Phylun relative abundance
```{r}
#phylum.gp <- read.table(file = here("data", "GP_otu_table_final_rarefied_rel_L2.txt"), header = T, sep = "\t", row.names = 1, check.names = FALSE) 
# recoding of sample names ----
#samplenames <- colnames(phylum.gp) #  sample names to be changed
#goodsamplenames <- samplenames %-% '[X]'# erase the X added by R 
#goodsamplenames # check it works
#colnames(phylum.gp) <- goodsamplenames #change the column names for the good names without X
##goodsamplenames <- stringr::str_replace_all(goodsamplenames, '[_]', '.') # code as in meta.morpho.phe
#str(phylum.gp) #check structure
#phylum.gp = data.frame(t(phylum.gp))
# ----------------- PAH-RHD gene - Gram Positive - Relative abundance - Stackbars  --------------------------------- 
#class.gp = read.table(file = "gp_bcr_otu_table_final_rarefied_rel_L3.txt", header = T, sep = "\t", row.names = 1, check.names = FALSE)
# recoding of sample names ----
#samplenames <- colnames(class.gp) #  sample names to be changed
#goodsamplenames <- samplenames %-% '[X]'# erase the X added by R 
#goodsamplenames <- stringr::str_replace_all(goodsamplenames, '[_]', '.') # code as in meta.morpho.phe
#goodsamplenames # check it works
#colnames(class.gp) <- goodsamplenames #change the column names for the good names without X
#str(class.gp) #check structure
#class.gp = data.frame(t(class.gp))
```

## GP Genus relative abundance
```{r}
genus.gp = read.table(file = here("data", "gp_bcr_otu_table_final_rarefied_rel_L6.txt"), header = T, sep = "\t", row.names = 1, check.names = FALSE)
# recoding of sample names ----
samplenames <- colnames(genus.gp) #  sample names to be changed
goodsamplenames <- samplenames %-% '[X]'# erase the X added by R 
goodsamplenames <- stringr::str_replace_all(goodsamplenames, '[_]', '.') # code as in meta.morpho.phe
goodsamplenames <- stringr::str_replace_all(goodsamplenames, '.GP', '') # code as in meta.morpho.phe
goodsamplenames <- stringr::str_replace_all(goodsamplenames, 'BULK', 'Bulk')
goodsamplenames <- stringr::str_replace_all(goodsamplenames, 'RHIZO', 'Rhizo')
goodsamplenames # check it works
colnames(genus.gp) <- goodsamplenames #change the column names for the good names without X
str(genus.gp) #check structure
genus.gp = data.frame(t(genus.gp))
# tyding up ----
rm(goodsamplenames)
rm(samplenames) 
```


# Curing data tables

##  Prokaryota

There is a missing value, due to missing sample for PHE CEN 4 Rhizosphere. I had to eliminate this from the metadata. 

```{r Prokaryota - Curing taxonomy data tables}
# Create Taxonomy table ----
library(stringr)
dim(obj1.raw16s) #15154 in 192 samples - No Chloroplasts (15192 with Chloroplasts)
taxonomy.16s <- as.data.frame(obj1.raw16s[,ncol(obj1.raw16s)]) # taxonomy from last column as independent table
otuids.16s <- rownames((obj1.raw16s))
rownames(taxonomy.16s) <- otuids.16s
colnames(taxonomy.16s) <- c("Taxonomy")

# separate taxonomic groups in variables ----
tax.clean <- separate(taxonomy.16s, Taxonomy, into = c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species", "Strain"), sep = ";")
tax.clean <- tax.clean[,-which(names(tax.clean) %in% c("Species", "Strain"))]
tax.clean <- as.data.frame(tax.clean)
as.factor(tax.clean$Domain) # 2 Domain - see if there is contamination with chloroplast
as.factor(tax.clean$Phylum) # 50 Phyla 
as.factor(tax.clean$Class) # 138 classes
as.factor(tax.clean$Order) # 346 orders
as.factor(tax.clean$Family) # 545 Families
as.factor(tax.clean$Genus) # 1133 genus
str(tax.clean)

# eliminate the characters one by one or all using stringr package -----
tax.clean <- tax.clean |> mutate_all(~gsub("(^|[kpcfgo])(_{2,})", "", .))

# collate otus with clean taxonomy table
obj1.raw16s_bis <- cbind(obj1.raw16s[,1:(ncol(obj1.raw16s)-1)], tax.clean)
#View(obj1.raw16s_bis[1:5,])

todelete = c("otuids.16s", "taxonomy.16s", "obj1.raw16s")
rm(list = todelete)
```

```{r Prokaryota -  Preparing  abundance matrix, ordering tables}

#### -----  all Prokaryotes ----
tax.clean.16s <- tax.clean # working file for taxonomy

# ------- creating separated table for community composition no tax ------ #
com16s <- obj1.raw16s_bis[,1:191] # create community table with asv table with only abundances not taxonomy
com16.t <- t(com16s) # transposing table, samples as rows, species as columns to match metadata
com16.rel <- (com16.t/rowSums(com16.t)) #Normalization by relative abundance
(rowSums(com16.rel)) #Sanity check

# ----------- Sort by row names so all objects are the same -------------#
rownames(meta.morpho.phe) <- meta.morpho.phe$code # put code in row names
meta16.sorted <- meta.morpho.phe[order(row.names(meta.morpho.phe)),] # order metadata 
com16.sorted <- com16.rel[order(row.names(com16.rel)),]
#View(meta16.sorted[1:10,1:15])
#View(com16.sorted[1:10,1:15])
rownames(meta16.sorted) == rownames(com16.sorted) # they are not all TRUE because there is one missing samples in com16.sorted
dim(meta16.sorted) #  192 in 39
dim(com16.sorted) # 191 in 15154
matching_row_names <- rownames(meta16.sorted) %in% rownames(com16.sorted)# Find the matching row names 
meta16.sorted <- meta16.sorted[matching_row_names, ] # Subset meta16.sorted 
rownames(meta16.sorted) == rownames(com16.sorted) # All true now - OK

todelete = c("tax.clean", "com16.rel", "com16.t")
rm(list = todelete)
```

## Fungi

Curing taxonomy data tables 
```{r Fungi - Curing taxonomy data tables}
# Create Taxonomy table ----
#library(stringr) # read only if not previously loaded
dim(obj1.rawits)

#obj1.rawits[,140] <- NULL # eliminar el echantillon 140 que contiene PHE CEN 4 Rhizosphere
taxonomy.its <- as.data.frame(obj1.rawits[,193]) # taxonomy from last column as independent table
otuids.its <- rownames((obj1.rawits))
rownames(taxonomy.its) <- otuids.its
colnames(taxonomy.its) <- c("Taxonomy")

# separate taxonomic groups in variables ----
tax.clean <- separate(taxonomy.its, Taxonomy, into = c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species", "Strain"), sep = ";")
tax.clean <- tax.clean[,-which(names(tax.clean) %in% c("Species", "Strain"))]
tax.clean <- as.data.frame(tax.clean)
as.factor(tax.clean$Domain) # 1 Domain - see if there is contamination with chloroplast
levels(as.factor(tax.clean$Phylum)) # 4 Phyla
levels(as.factor(tax.clean$Class)) # 6 classes
levels(as.factor(tax.clean$Order)) # 13 orders
levels(as.factor(tax.clean$Family)) # 261 Families
levels(as.factor(tax.clean$Genus)) # 599 genus
str(tax.clean)
tax.clean <- tax.clean |> mutate_all(~gsub("(^|[kpcfgo])(_{2,})", "", .))

# collate otus with clean taxonomy table
obj1.rawits_bis <- cbind(obj1.rawits[,1:192], tax.clean)

todelete = c("otuids.its", "taxonomy.its", "obj1.rawits")
rm(list = todelete)
```

```{r Fungi -  Preparing  abundance matrix, ordering tables}

#### -----  all Prokaryotes ----
tax.clean.its <- tax.clean # working file for taxonomy

# ------- creating separated table for community composition no tax ------ #
comits <- obj1.rawits_bis[,1:192] # create community table with asv table with only abundances not taxonomy
comits.t <- t(comits) # transposing table, samples as rows, species as columns to match metadata
comits.rel <- (comits.t/rowSums(comits.t)) #Normalization by relative abundance
(rowSums(comits.rel)) #Sanity check

# ----------- Sort by row names so all objects are the same -------------#
rownames(meta.morpho.phe) <- meta.morpho.phe$code # put code in row names

metaits.sorted <- meta.morpho.phe[order(row.names(meta.morpho.phe)),] # order metadata 
rownames(metaits.sorted) # it seems that samples 0.EN.1.Rhizo is missing from phylym, genus, class so taking out from metaits.sorted
str(metaits.sorted)
str(comits.rel)
#metaits.sorted[74,]
#metaits.sorted <- metaits.sorted[-74,]
comits.sorted <- comits.rel[order(row.names(comits.rel)),]
rownames(metaits.sorted) == rownames(comits.sorted)

todelete = c("tax.clean", "comits.rel", "comits.t")
rm(list = todelete)
```

## Gram Negative

```{r Gram Negative - Curing taxonomy data tables}
# Create Taxonomy table ----
#library(stringr) # read only if not previously loaded
dim(obj1.rawgn) # 2818 in 191
taxonomy.gn <- as.data.frame(obj1.rawgn[,ncol(obj1.rawgn)]) # taxonomy from last column as independent table
otuids.gn <- rownames((obj1.rawgn))
rownames(taxonomy.gn) <- otuids.gn
colnames(taxonomy.gn) <- c("Taxonomy")

# separate taxonomic groups in variables ----
tax.clean <- separate(taxonomy.gn, Taxonomy, into = c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species", "Strain"), sep = ";")
tax.clean <- tax.clean[,-which(names(tax.clean) %in% c("Species", "Strain"))]
tax.clean <- as.data.frame(tax.clean)
tax.clean <- tax.clean |> mutate_all(~gsub("(^|[kpcfgo])(_{2,})", "", .))
levels(as.factor(tax.clean$Domain)) # 1 Domain - bacteria
levels(as.factor(tax.clean$Phylum)) # 4 Deinococcus-Thermus, Firmicutes and Proteobacteria and ""
levels(as.factor(tax.clean$Class)) # 6 cAlphaproteobacteria Bacilli Betaproteobacteria Deinococci Gammaproteobacteria
levels(as.factor(tax.clean$Order)) # 13 Aeromonadales, alteromonadales, bacillales, burkholderiales, cellvibrionales, deinococcales, enterobacterales, gammaproteobacteria-undef, pseudomonadales, rhizobiales, rhodobacterales and sphingomonadales
levels(as.factor(tax.clean$Family)) # 17 Aeromonadaceae Alcaligenaceae Aurantimonadaceae Bacillaceae Burkholderiaceae Cellvibrionaceae Comamonadaceae Deinococcaceae Enterobacteriaceae Gammaproteobacteria-undef Pseudomonadaceae  Rhizobiaceae Rhodobacteraceae Shewanellaceae  Sphingomonadaceae Yersiniaceae
levels(as.factor(tax.clean$Genus)) # 22 genus Achromobacter, Aeromonas, Bacillus, Cellvibrio, Comamonas, Deinococcus, Delftia, Ensifer, Enterobacter, Gammaproteobacteria-undef, Lysinibacillus, Martelella, Polaromonas, Pseudomonas, Pulveribacter, Rahnella, Ralstonia, Ramlibacter, Shewanella, Sphingomonas and Yangia. 
str(tax.clean)
# collate otus with clean taxonomy table
obj1.rawgn_bis <- cbind(obj1.rawgn[,1:ncol(obj1.rawgn)-1], tax.clean)

todelete = c("otuids.gn", "taxonomy.gn", "obj1.rawgn")
rm(list = todelete)
```

```{r Gram Negative -  Preparing  abundance matrix, ordering tables}
tax.clean.gn <- tax.clean # working file for taxonomy
# ------- creating separated table for community composition no tax ------ #
comgn <- obj1.rawgn_bis[,purrr::map_lgl(obj1.rawgn_bis, is.integer)] # create community table with asv table with only abundances not taxonomy
comgn.t <- t(comgn) # transposing table, samples as rows, species as columns to match metadata
comgn.rel <- (comgn.t/rowSums(comgn.t)) #Normalization by relative abundance
(rowSums(comgn.rel)) #Sanity check

# ----------- Sort by row names so all objects are the same -------------#
rownames(meta.morpho.phe) <- meta.morpho.phe$code # put code in row names
metagn.sorted <- meta.morpho.phe[order(row.names(meta.morpho.phe)),] # order metadata 
comgn.sorted <- comgn.rel[order(row.names(comgn.rel)),]

dim(metagn.sorted) # 192 in 39
dim(comgn.sorted)# 190 in 2818

matching_row_names <- rownames(metagn.sorted) %in% rownames(comgn.sorted)# Find the matching row names 
metagn.sorted <- metagn.sorted[matching_row_names, ] 
rownames(comgn.sorted) == rownames(metagn.sorted)
todelete = c("tax.clean", "comgn.rel", "comgn.t")
rm(list = todelete)
```


## Gram Positive

```{r Gram Positive - Curing taxonomy data tables}
# Create Taxonomy table ----
#library(stringr) # Read only if not previouly loaded
dim(obj1.rawgp) # 6415 in 193
taxonomy.gp <- as.data.frame(obj1.rawgp[,193]) # taxonomy from last column as independent table
otuids.gp <- rownames((obj1.rawgp))
rownames(taxonomy.gp) <- otuids.gp
colnames(taxonomy.gp) <- c("Taxonomy")

# separate taxonomic groups in variables ----
tax.clean <- separate(taxonomy.gp, Taxonomy, into = c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species", "Strain"), sep = ";")
tax.clean <- tax.clean[,-which(names(tax.clean) %in% c("Species", "Strain"))]
tax.clean <- as.data.frame(tax.clean)
tax.clean <- tax.clean |> mutate_all(~gsub("(^|[kpcfgo])(_{2,})", "", .))
as.factor(tax.clean$Domain) # 2 Domain - see if there is contamination with chloroplast

levels(as.factor(tax.clean$Phylum)) # 9 Actinobacteria, Bacteroidetes, Chloroflexi, Firmicutes, Planctomycetes, Protebactria, Spirochaetes, Verrucomicrobia  
levels(as.factor(tax.clean$Class)) # 16 Actinobacteria, Alphaproteobacteria, Ardenticatenia, Betaprotebacteria, Chitinophagia, Clostridia, Cytophagia, Deltaprotebacteria, Gammaproteobacteria, Opitutae, Phycisphaerae, Planctomycetia, Sphingobacteriia, Spirochaetia.
levels(as.factor(tax.clean$Order)) # 32 orders
levels(as.factor(tax.clean$Family)) # 46 Families
levels(as.factor(tax.clean$Genus)) # 68 genus

obj1.rawgp_bis <- cbind(obj1.rawgp[,1:ncol(obj1.rawgp)-1], tax.clean) # collate asv with clean tax table
dim(obj1.rawgp_bis) #6415  198
obj1.rawgp_bis <- subset(obj1.rawgp_bis, !grepl("Eukaryota", Domain))
dim(obj1.rawgp_bis) #6412  198 afterfilter out
# tyding up
todelete = c("otuids.gp", "taxonomy.gp", "obj1.rawgp")
rm(list = todelete)
```

```{r Gram Positive -  Preparing  abundance matrix, ordering tables}
tax.clean.gp <- tax.clean # working file for taxonomy
# ------- creating separated table for community composition no tax ------ #
comgp <- obj1.rawgp_bis[,purrr::map_lgl(obj1.rawgp_bis, is.integer)] # create community table with asv table with only abundances not taxonomy
comgp.t <- t(comgp) # transposing table, samples as rows, species as columns to match metadata
comgp.rel <- (comgp.t/rowSums(comgp.t)) #Normalization by relative abundance
(rowSums(comgp.rel)) #Sanity check

# ----------- Sort by row names so all objects are the same -------------#
rownames(meta.morpho.phe) <- meta.morpho.phe$code # put code in row names
metagp.sorted <- meta.morpho.phe[order(row.names(meta.morpho.phe)),] # order metadata 
comgp.sorted <- comgp.rel[order(row.names(comgp.rel)),]
#View(metagp.sorted[1:10,1:15])
#View(comgp.sorted[1:10,1:15])
rownames(comgp.sorted) == rownames(metagp.sorted) # all good names
# ------------- clean everything you don't need anymore ------------ #
todelete = c("tax.clean", "comgp.rel", "comgp.t")
rm(list = todelete)
```

# ----------------------------------------------

# 2.1 MICROBIAL COM DIVERSITY

# Analyses
# Diversity index analysis
## Fungi
```{r calculate diversity indexes - its}
alphadivits <- alphaDiversity(comits, siteInCol = TRUE, threshold = 1, percent = FALSE, write = TRUE)
alphadivits$allBio
alphaitsits <- as.data.frame(alphadivits$allBio)
metaits.sorted <- cbind(metaits.sorted, alphaitsits)
todelete = c("comits", "alphadivits", "alphaitsits")
rm(list = todelete)
```

```{r Statistical summary - ITS diversity index}
# For supplemental table 3: Median H' and observed ASV with MAD: ITS
its.diversity.summary <- psych::describeBy(x = metaits.sorted[,40:41], group = metaits.sorted[,39], mat = TRUE, digits = 3)
write.csv(x = its.diversity.summary, file = here("output", "its.diversity.summary.csv"), row.names = TRUE)
```

Visualize distribution
```{r Visualize distribution - diversity indexes - its}
par(mfrow = c(2,2))
hist(metaits.sorted$shannon, main = "Shannon diversity", xlab = "", breaks = 10)
hist(metaits.sorted$invsimperson, main = "1/Simpson diversity", xlab = "", breaks = 10)
hist(metaits.sorted$chao1, main = "Chao richness", xlab = "", breaks = 15)
hist(metaits.sorted$observed, main = "observed species", xlab =  "", breaks = 15)
```

### Shannon 
```{r Statistical analysis - diversity indexes - its}
# Assess normality and homoscedasticity
qqnorm(log(metaits.sorted$shannon))
qqline(log(metaits.sorted$shannon))
bartlett.test(shannon~div.cont.comp, data = metaits.sorted) #Bartlett's K-squared = 83.017, df = 31, p-value = 1.23e-06

# Models based on treatments 
aov.shanits.full <- aov(shannon~diversity_status*contamination*compartment, data = metaits.sorted) # full Shannon its model
summary(aov.shanits.full) # interactions not significant

lm.shanits.reduced <- lm(shannon~diversity_status+contamination+compartment, data = metaits.sorted)
summary(lm.shanits.reduced)
summary(aov(lm.shanits.reduced)) # model significant?

#table2spreadsheet(x = lm.shanits.reduced, file = here::here("output23", "tables", "Suppl_table_4"), type = "XLS", append = TRUE, sheetName = "its-H-estim", digits = 2, add.rownames = TRUE)
#table2spreadsheet(x = summary(aov(lm.shanits.reduced)), file = here::here("output23", "tables", "Suppl_table_4"), type = "XLS", append = TRUE, sheetName = "its-H-aov", digits = 2, add.rownames = TRUE)
```

Linear models 
Evaluate effect of biomass and residual phenanthrene in Shannon diversity
Does biomass and the leftover phe affect the shannon diversity? NO and YES
```{r}
lm.shanits.biomass.phe <- lm(shannon ~ biomass + phe, data = metaits.sorted)
summary(lm.shanits.biomass.phe)
summary(aov(lm.shanits.biomass.phe))
#table2spreadsheet(x = lm.shanits.biomass.phe, file = here::here("output23", "tables", "Suppl_table_4b"), type = "XLS", append = TRUE, sheetName = "its-H-estim", digits = 2, add.rownames = TRUE)
#table2spreadsheet(x = summary(aov(lm.shanits.biomass.phe)), file = here::here("output23", "tables", "Suppl_table_4b"), type = "XLS", append = TRUE, sheetName = "its-H-aov", digits = 2, add.rownames = TRUE)
```

### Observed
```{r Statistical analysis - diversity indexes - its}
# Assess normality and homoscedasticity
qqnorm(log(metaits.sorted$observed))
qqline(log(metaits.sorted$observed))
bartlett.test(observed~div.cont.comp, data = metaits.sorted) #Bartlett's K-squared = 64.1, df = 31, p-value = 0.0004316

# Models based on treatments 
aov.obsits.full <- aov(observed~diversity_status*contamination*compartment, data = metaits.sorted) # full observed its model
summary(aov.obsits.full) # interactions not significant

lm.obsits.reduced <- lm(observed~diversity_status+contamination+compartment, data = metaits.sorted)
summary(lm.obsits.reduced)
summary(aov(lm.obsits.reduced)) # model significant?

#table2spreadsheet(x = lm.obsits.reduced, file = here::here("output23", "tables", "Suppl_table_4"), type = "XLS", append = TRUE, sheetName = "its-obs-estim", digits = 2, add.rownames = TRUE)
#table2spreadsheet(x = summary(aov(lm.obsits.reduced)), file = here::here("output23", "tables", "Suppl_table_4"), type = "XLS", append = TRUE, sheetName = "its-obs-aov", digits = 2, add.rownames = TRUE)
```

Linear models 
Evaluate effect of biomass and residual phenanthrene in observed diversity
Does biomass and the leftover phe affect the observed diversity? NO and YES
```{r}
lm.obsits.biomass.phe <- lm(observed ~ biomass + phe, data = metaits.sorted)
summary(lm.obsits.biomass.phe)
summary(aov(lm.obsits.biomass.phe))
#table2spreadsheet(x = lm.obsits.biomass.phe, file = here::here("output23", "tables", "Suppl_table_4b"), type = "XLS", append = TRUE, sheetName = "its-obs-estim", digits = 2, add.rownames = TRUE)
#table2spreadsheet(x = summary(aov(lm.obsits.biomass.phe)), file = here::here("output23", "tables", "Suppl_table_4b"), type = "XLS", append = TRUE, sheetName = "its-obs-aov", digits = 2, add.rownames = TRUE)
```

## Prokaryota
Calculate diversity indexes
```{r calculate Diversity indexes - 16S}
alphadiv16s <- alphaDiversity(com16s, siteInCol = TRUE, threshold = 1, percent = FALSE, write = TRUE)
#alphadiv16s$allBio
alpha1616S <- as.data.frame(alphadiv16s$allBio)
meta16.sorted <- merge(meta16.sorted, alpha1616S, by= 0, all = FALSE)
todelete = c("com16s", "alphadiv16s", "alpha1616S")
rm(list = todelete)
#meta16.sorted # now includes alpha diversity indexes where observed is species observed. 
```
Calculate median and MAD for Shannon and observed ASVs (richness)
```{r Statistical summary - 16S diversity index}
s16.diversity.summary <- psych::describeBy(x = meta16.sorted[,41:42], group = meta16.sorted[,40], mat = TRUE, digits = 3)
#write.csv(x = s16.diversity.summary, file = here("output23", "tables", "16s.diversity.summary.csv"), row.names = TRUE)
```
Statistical analysis Shannon
```{r Statistical analysis - diversity indexes - 16S}
par(mfrow = c(2,2))
hist(meta16.sorted$shannon, main = "Shannon diversity", xlab = "", breaks = 10)
hist(meta16.sorted$invsimperson, main = "1/Simpson diversity", xlab = "", breaks = 10)
hist(meta16.sorted$chao1, main = "Chao richness", xlab = "", breaks = 15)
hist(meta16.sorted$observed, main = "observed species", xlab =  "", breaks = 15)
```

### Shannon 
```{r Statistical analysis - diversity indexes - 16s}
meta16.sorted$diversity_status = factor(meta16.sorted$diversity_status, levels = c("O", "C", "E", "N", "CE", "EN", "CN", "CEN"), labels = c("BF", "C", "E", "N", "CE", "EN", "CN", "CEN"))
# Assess normality and homoscedasticity
qqnorm(log(meta16.sorted$shannon))
qqline(log(meta16.sorted$shannon))
bartlett.test(shannon~div.cont.comp, data = meta16.sorted) #Bartlett's K-squared = 54.653, df = 31, p-value = 0.00546

# Models based on treatments 
aov.shan16s.full <- aov(shannon~diversity_status*contamination*compartment, data = meta16.sorted) # full Shannon 16s model
summary(aov.shan16s.full) # interactions not significant

lm.shan16s.reduced <- lm(shannon~diversity_status+contamination+compartment, data = meta16.sorted)
summary(lm.shan16s.reduced)
summary(aov(lm.shan16s.reduced)) # model significant?

#table2spreadsheet(x = lm.shan16s.reduced, file = here::here("output23", "tables", "Suppl_table_4"), type = "XLS", append = TRUE, sheetName = "16s-H-estim", digits = 2, add.rownames = TRUE)
#table2spreadsheet(x = summary(aov(lm.shan16s.reduced)), file = here::here("output23", "tables", "Suppl_table_4"), type = "XLS", append = TRUE, sheetName = "16s-H-aov", digits = 2, add.rownames = TRUE)
```

Linear models 
Evaluate effect of biomass and residual phenanthrene in Shannon diversity
Does biomass and the leftover phe affect the shannon diversity? NO and YES
```{r}
lm.shan16s.biomass.phe <- lm(shannon ~  phe + biomass, data = meta16.sorted)
summary(lm.shan16s.biomass.phe)
summary(aov(lm.shan16s.biomass.phe))
#table2spreadsheet(x = lm.shan16s.biomass.phe, file = here::here("output23", "tables", "Suppl_table_4b"), type = "XLS", append = TRUE, sheetName = "16s-H-estim", digits = 2, add.rownames = TRUE)
#table2spreadsheet(x = summary(aov(lm.shan16s.biomass.phe)), file = here::here("output23", "tables", "Suppl_table_4b"), type = "XLS", append = TRUE, sheetName = "16s-H-aov", digits = 2, add.rownames = TRUE)
```

### Observed
```{r Statistical analysis - diversity indexes - 16s}
# Assess normality and homoscedasticity
qqnorm(log(meta16.sorted$observed))
qqline(log(meta16.sorted$observed))
bartlett.test(observed~div.cont.comp, data = meta16.sorted) #Bartlett's K-squared = 36.77, df = 31, p-value = 0.2191

# Models based on treatments 
aov.obs16s.full <- aov(observed~diversity_status*contamination*compartment, data = meta16.sorted) # full observed 16s model
summary(aov.obs16s.full) # interactions not significant

lm.obs16s.reduced <- lm(observed~diversity_status+contamination+compartment, data = meta16.sorted)
summary(lm.obs16s.reduced)
summary(aov(lm.obs16s.reduced)) # model significant?

#table2spreadsheet(x = lm.obs16s.reduced, file = here::here("output23", "tables", "Suppl_table_4"), type = "XLS", append = TRUE, sheetName = "16s-obs-estim", digits = 2, add.rownames = TRUE)
#table2spreadsheet(x = summary(aov(lm.obs16s.reduced)), file = here::here("output23", "tables", "Suppl_table_4"), type = "XLS", append = TRUE, sheetName = "16s-obs-aov", digits = 2, add.rownames = TRUE)
```

Linear models 
Evaluate effect of biomass and residual phenanthrene in observed diversity
Does biomass and the leftover phe affect the observed diversity? NO and YES
```{r}
lm.obs16s.biomass.phe <- lm(observed ~ biomass + phe, data = meta16.sorted)
summary(lm.obs16s.biomass.phe)
summary(aov(lm.obs16s.biomass.phe))
#table2spreadsheet(x = lm.obs16s.biomass.phe, file = here::here("output23", "tables", "Suppl_table_4b"), type = "XLS", append = TRUE, sheetName = "16s-obs-estim", digits = 2, add.rownames = TRUE)
#table2spreadsheet(x = summary(aov(lm.obs16s.biomass.phe)), file = here::here("output23", "tables", "Suppl_table_4b"), type = "XLS", append = TRUE, sheetName = "16s-obs-aov", digits = 2, add.rownames = TRUE)
```


## Gram Negative 

```{r calculate Diversity indexes - gn}
alphadivgn <- alphaDiversity(comgn, siteInCol = TRUE, threshold = 1, percent = FALSE, write = TRUE)
alphadivgn$allBio
alphagngn <- as.data.frame(alphadivgn$allBio)
metagn.sorted <- merge(metagn.sorted, alphagngn, by= 0, all = FALSE)

todelete <- c("comgn", "alphadivgn", "alphagngn")
rm(list = todelete)
```

```{r Statistical summary - GN diversity index}
gn.diversity.summary <- psych::describeBy(x = metagn.sorted[,41:42], group = metagn.sorted[,40], mat = TRUE, digits = 3)
write.csv(x = gn.diversity.summary, file = here("output23","tables", "gn.diversity.summary.csv"), row.names = TRUE)
```

```{r Statistical analysis - diversity indexes - gn}
par(mfrow = c(2,2))
hist(metagn.sorted$shannon, main = "Shannon diversity", xlab = "", breaks = 10)
hist(metagn.sorted$invsimperson, main = "1/Simpson diversity", xlab = "", breaks = 10)
hist(metagn.sorted$chao1, main = "Chao richness", xlab = "", breaks = 15)
hist(metagn.sorted$observed, main = "observed species", xlab =  "", breaks = 15)
```

There are clearly some outliers. calculate which ones are outliers using the Tukey's method

```{r}
# Example vector of values
values <- metagn.sorted$observed
model<-lm(shannon~diversity_status+compartment+contamination, data = metagn.sorted)
plot(model) # The evaluation of the model identifies the samples 73, 77 and 14 as outliers
todelete <- c(73, 77, 14)
metagn.sorted_noout <- metagn.sorted[!rownames(metagn.sorted) %in% todelete,]
```

### Shannon 
```{r Statistical analysis - diversity indexes - gn}
metagn.sorted_noout$diversity_status <- factor(metagn.sorted_noout$diversity_status, levels = c("O", "C", "E", "N", "CE", "EN", "CN", "CEN"), labels = c("BF", "C", "E", "N", "CE", "EN", "CN", "CEN"))
# Assess normality and homoscedasticity
qqnorm(metagn.sorted_noout$shannon)
qqline(metagn.sorted_noout$shannon)
bartlett.test(shannon~div.cont.comp, data = metagn.sorted_noout) #Bartlett's K-squared = 47.013, df = 31, p-value = 0.03264

# Models based on treatments 
aov.shangn.full <- aov(shannon~diversity_status*contamination*compartment, data = metagn.sorted_noout) # full Shannon gn model
summary(aov.shangn.full) # interactions not significant

lm.shangn.reduced <- lm(shannon~diversity_status+contamination+compartment, data = metagn.sorted_noout)
summary(lm.shangn.reduced)
summary(aov(lm.shangn.reduced)) # model significant?

#table2spreadsheet(x = lm.shangn.reduced, file = here::here("output23", "tables", "Suppl_table_4"), type = "XLS", append = TRUE, sheetName = "gn-H-estim", digits = 2, add.rownames = TRUE)
#table2spreadsheet(x = summary(aov(lm.shangn.reduced)), file = here::here("output23", "tables", "Suppl_table_4"), type = "XLS", append = TRUE, sheetName = "gn-H-aov", digits = 2, add.rownames = TRUE)
```

Linear models 
Evaluate effect of biomass and residual phenanthrene in Shannon diversity
Does biomass and the leftover phe affect the shannon diversity? NO and YES
```{r}
lm.shangn.biomass.phe <- lm(shannon ~  phe + biomass, data = metagn.sorted_noout)
summary(lm.shangn.biomass.phe)
summary(aov(lm.shangn.biomass.phe))
#table2spreadsheet(x = lm.shangn.biomass.phe, file = here::here("output23", "tables", "Suppl_table_4b"), type = "XLS", append = TRUE, sheetName = "gn-H-estim", digits = 2, add.rownames = TRUE)
#table2spreadsheet(x = summary(aov(lm.shangn.biomass.phe)), file = here::here("output23", "tables", "Suppl_table_4b"), type = "XLS", append = TRUE, sheetName = "gn-H-aov", digits = 2, add.rownames = TRUE)
```

### Observed
```{r Statistical analysis - diversity indexes - gn}
# Assess normality and homoscedasticity
qqnorm(log(metagn.sorted_noout$observed))
qqline(log(metagn.sorted_noout$observed))
bartlett.test(observed~div.cont.comp, data = metagn.sorted_noout) #Bartlett's K-squared = 56.693, df = 31, p-value = 0.003245

# Models based on treatments 
aov.obsgn.full <- aov(observed~diversity_status*contamination*compartment, data = metagn.sorted_noout) # full observed gn model
summary(aov.obsgn.full) # interactions not significant

lm.obsgn.reduced <- lm(observed~diversity_status+contamination+compartment, data = metagn.sorted_noout)
summary(lm.obsgn.reduced)
summary(aov(lm.obsgn.reduced)) # model significant?

#table2spreadsheet(x = lm.obsgn.reduced, file = here::here("output23", "tables", "Suppl_table_4"), type = "XLS", append = TRUE, sheetName = "gn-obs-estim", digits = 2, add.rownames = TRUE)
#table2spreadsheet(x = summary(aov(lm.obsgn.reduced)), file = here::here("output23", "tables", "Suppl_table_4"), type = "XLS", append = TRUE, sheetName = "gn-obs-aov", digits = 2, add.rownames = TRUE)
```

Linear models 
Evaluate effect of biomass and residual phenanthrene in observed diversity
Does biomass and the leftover phe affect the observed diversity? NO and YES
```{r}
lm.obsgn.biomass.phe <- lm(observed ~ biomass + phe, data = metagn.sorted_noout)
summary(lm.obsgn.biomass.phe)
summary(aov(lm.obsgn.biomass.phe))
#table2spreadsheet(x = lm.obsgn.biomass.phe, file = here::here("output23", "tables", "Suppl_table_4b"), type = "XLS", append = TRUE, sheetName = "gn-obs-estim", digits = 2, add.rownames = TRUE)
#table2spreadsheet(x = summary(aov(lm.obsgn.biomass.phe)), file = here::here("output23", "tables", "Suppl_table_4b"), type = "XLS", append = TRUE, sheetName = "gn-obs-aov", digits = 2, add.rownames = TRUE)
```

## Gram Positive

```{r calculate Diversity indexes - gp}
#using library otuSummary
#View(comgp.sorted[1:10, 45:47])
alphadivgp <- alphaDiversity(comgp, siteInCol = TRUE, threshold = 1, percent = FALSE, write = TRUE)
alphadivgp$allBio
alphagpgp <- as.data.frame(alphadivgp$allBio)
metagp.sorted <- cbind(metagp.sorted, alphagpgp)
todelete <- c("comgp", "alphadivgp", "alphagpgp")
rm(list = todelete)
#metagp.sorted # now includes alpha diversity indexes where observed is species observed. 
```

Check for outliers
```{r}
metagp.sorted$diversity_status = factor(metagp.sorted$diversity_status, levels = c("O", "C", "E", "N", "CE", "EN", "CN", "CEN"), labels = c("BF", "C", "E", "N", "CE", "EN", "CN", "CEN"))
# Assess normality and homoscedasticity
qqnorm(sqrt(metagp.sorted$shannon))
qqline(sqrt(metagp.sorted$shannon))
bartlett.test(sqrt(shannon)~div.cont.comp, data = metagp.sorted) # Bartlett's K-squared = 338.11, df = 31, p-value < 2.2e-gp
# Manually eliminate outliers - "0.EN.1.Rhizo", "0.0.4.Rhizo", "PHE.0.1.Bulk"
todelete <- c("0.EN.1.Rhizo", "0.0.4.Rhizo", "PHE.0.1.Bulk")
metagp.sorted_noout <- metagp.sorted[!rownames(metagp.sorted) %in% todelete,]
```

```{r Statistical summary - gp diversity index}
gp.diversity.summary <- psych::describeBy(x = metagp.sorted_noout[,40:41], group = metagp.sorted_noout[,39], mat = TRUE, digits = 3)
write.csv(x = gp.diversity.summary, file = here("output23","tables", "gp.diversity.summary.csv"), row.names = TRUE)
```

```{r Statistical analysis - diversity indexes - gp}
par(mfrow = c(2,2))
hist(metagp.sorted_noout$shannon, main = "Shannon diversity", xlab = "", breaks = 10)
hist(metagp.sorted_noout$invsimperson, main = "1/Simpson diversity", xlab = "", breaks = 10)
hist(metagp.sorted_noout$chao1, main = "Chao richness", xlab = "", breaks = 15)
hist(metagp.sorted_noout$observed, main = "observed species", xlab =  "", breaks = 15)
```


### Shannon 
```{r Statistical analysis - diversity indexes - gp}
# Shannon transformation for left skewed data in data set without outliers
metagp.sorted_noout$shannon.t = log10(max(metagp.sorted_noout$shannon + 10) - metagp.sorted_noout$shannon)
qqnorm(sqrt(metagp.sorted_noout$shannon.t))
qqline(sqrt(metagp.sorted_noout$shannon.t))
bartlett.test(sqrt(shannon.t)~div.cont.comp, data = metagp.sorted_noout) # Bartlett's K-squared = 84.256, df = 31, p-value = 8.151e-07

# Full model based on treatments with interaction from metagp.sorted_noout (189 samples left)
aov.shangp.full <- aov(shannon.t~diversity_status*contamination*compartment, data = metagp.sorted_noout) # full Shannon gp model
summary(aov.shangp.full) # interactions not significant
#plot(aov.shangp.full)
lm.shangp.reduced <- lm(shannon.t~diversity_status+contamination+compartment, data = metagp.sorted_noout)
summary(lm.shangp.reduced)
summary(aov(lm.shangp.reduced)) # 

# Back transform coefficients:
coef.lm.shangp.reduced <- coef(lm.shangp.reduced)
coef.lm.shangp.reduced.back <- (max(metagp.sorted_noout$shannon + 1) - metagp.sorted_noout$shannon) - 10^coef.lm.shangp.reduced
coef.lm.shangp.reduced.back

#table2spreadsheet(x = lm.shangp.reduced, file = here::here("output23", "tables", "Suppl_table_4"), type = "XLS", append = TRUE, sheetName = "gp-H-estim", digits = 2, add.rownames = TRUE)
#table2spreadsheet(x = summary(aov(lm.shangp.reduced)), file = here::here("output23", "tables", "Suppl_table_4"), type = "XLS", append = TRUE, sheetName = "gp-H-aov", digits = 2, add.rownames = TRUE)
```

Linear models 
Evaluate effect of biomass and residual phenanthrene in Shannon diversity
Does biomass and the leftover phe affect the shannon diversity? NO and YES
```{r}
lm.shangp.biomass.phe <- lm(shannon ~  phe + biomass, data = metagp.sorted)
summary(lm.shangp.biomass.phe)
summary(aov(lm.shangp.biomass.phe))
#table2spreadsheet(x = lm.shangp.biomass.phe, file = here::here("output23", "tables", "Suppl_table_4b"), type = "XLS", append = TRUE, sheetName = "gp-H-estim", digits = 2, add.rownames = TRUE)
#table2spreadsheet(x = summary(aov(lm.shangp.biomass.phe)), file = here::here("output23", "tables", "Suppl_table_4b"), type = "XLS", append = TRUE, sheetName = "gp-H-aov", digits = 2, add.rownames = TRUE)
```

### Observed
```{r Statistical analysis - diversity indexes - gp}
# Assess normality and homoscedasticity
qqnorm(log(metagp.sorted_noout$observed))
qqline(log(metagp.sorted_noout$observed))
bartlett.test(observed~div.cont.comp, data = metagp.sorted_noout) # Bartlett's K-squared = 61.279, df = 31, p-value = 0.0009514

# Models based on treatments 
aov.obsgp.full <- aov(observed~diversity_status*contamination*compartment, data = metagp.sorted_noout) # full observed gp model
summary(aov.obsgp.full) # interactions not sigpificant

tx <- with(metagp.sorted_noout, interaction(metagp.sorted_noout$diversity_status, metagp.sorted_noout$compartment, metagp.sorted_noout$contamination))
aov.obsgplili <- aov(observed~compartment*contamination*diversity_status, data = metagp.sorted_noout) 
summary(aov.obsgplili)
tx.cmp.div <- with(metagp.sorted_noout, interaction(metagp.sorted_noout$diversity_status, metagp.sorted_noout$compartment))
tx.cnt.cmp <- with(metagp.sorted_noout, interaction(metagp.sorted_noout$compartment, metagp.sorted_noout$contamination))

anova.obslili <- lm(observed~tx.cnt.cmp, data = metagp.sorted_noout)
summary(anova.obslili)
tukeyobsgp <- HSD.test(anova.obslili, "tx", group = TRUE)
tukeyobsgp

lm.obsgp.reduced <- lm(observed~diversity_status+contamination+compartment, data = metagp.sorted_noout)
summary(lm.obsgp.reduced)
summary(aov(lm.obsgp.reduced)) # model sigpificant?

#table2spreadsheet(x = lm.obsgp.reduced, file = here::here("output23", "tables", "Suppl_table_4"), type = "XLS", append = TRUE, sheetName = "gp-obs-estim", digits = 2, add.rownames = TRUE)
#table2spreadsheet(x = summary(aov(lm.obsgp.reduced)), file = here::here("output23", "tables", "Suppl_table_4"), type = "XLS", append = TRUE, sheetName = "gp-obs-aov", digits = 2, add.rownames = TRUE)
```

Linear models 
Evaluate effect of biomass and residual phenanthrene in observed diversity
Does biomass and the leftover phe affect the observed diversity? NO and YES
```{r}
lm.obsgp.biomass.phe <- lm(observed ~ phe + biomass, data = metagp.sorted_noout)
summary(lm.obsgp.biomass.phe)
summary(aov(lm.obsgp.biomass.phe))
#table2spreadsheet(x = lm.obsgp.biomass.phe, file = here::here("output23", "tables", "Suppl_table_4b"), type = "XLS", append = TRUE, sheetName = "gp-obs-estim", digits = 2, add.rownames = TRUE)
#table2spreadsheet(x = summary(aov(lm.obsgp.biomass.phe)), file = here::here("output23", "tables", "Suppl_table_4b"), type = "XLS", append = TRUE, sheetName = "gp-obs-aov", digits = 2, add.rownames = TRUE)
```


# ----------------------------------------------

# 2.2 MICROBIAL COM STRUCTURE

## Fungi

### PERMANOVA
performing statistical analysis on the effect of treatments in the spatial distribution of the microbial community
```{r Permanova - its}
set.seed(18575748)
otu.dist.itsa <- vegdist(comits.sorted, method = "bray")
otu.perm.itsa <- adonis2(otu.dist.itsa~contamination*compartment*diversity_status, groups = block, data = metaits.sorted )
otu.perm.itsa
#write.table(otu.perm.itsa$aov.tab, file = "its_permanova_div-cont-comp.txt", sep = "\t", dec = ".")
#table2spreadsheet(x = otu.perm.itsa, file = here::here("output23", "tables", "its_permanova_div-cont-comp"), type = "XLS", append = TRUE, sheetName = "its-permnv", digits = 2, add.rownames = TRUE)

```

### PCoA calculation
Calculation of matrix and eigenvalues for PCoA plotting
```{r PCoA - Matrix and eigenvalues - its}
# ------ r calculating eigenvalues with BrayCurtis D ------ #
comits.dist <- vegdist(comits.sorted,method = "bray") # Dissimilarity matrix for its community with Bray Curtis index, from comits.sorted which elements are sorted the same way as in metaits.sorted
#str(com.dist)
# --------- Eliminate negatives by sqrt transformation and calculate PCoA with cmdscale ----------- #
comits.pcoa <- cmdscale(sqrt(comits.dist), eig = T) #sqrt turn non-ecuclidean dissimilarity matrix into Euclidean
#str(comits.pcoa)
# -------- Percentage of variability explained by eigen values 1 and 2 ------ #
explainedvar1 <- (comits.pcoa$eig[1]/sum(comits.pcoa$eig)*100)#Axis1 the first axis explains 28.90% of the variance
explainedvar1
explainedvar2 <- (comits.pcoa$eig[2]/sum(comits.pcoa$eig)*100)#Axis2 the second axis explains 6.09% of the variance
explainedvar2
sumeigen <- (explainedvar1 + explainedvar2)#+explainedvar3+explainedvar4+explainedvar5+explainedvar6) # toghether, axis 1 and 2 explain 34.98% of the variance.
sumeigen
# ----------- Create coordinates for axis 1 and 2 for PCoA from eigenvalues ------------- #
com.pcoa.points <- data.frame(comits.pcoa$points) # create a column with the coordinates for each sample
colnames(com.pcoa.points) <- c("Axis1", "Axis2") # rename coordinate columns

### ------------ PCoA ------------- ###
com.pcoa.points.bind <- cbind(com.pcoa.points,metaits.sorted) #Everything need to be in the same object, ordered comunity and ordered metadata
(str(com.pcoa.points.bind))
```

### PCoA plotting
```{r PCoA plot 6 - its same colors as other figures}
CPCOLS <- c("#DCDCDC", "#707070", "#1874CD", "#FF0000", "#FFFF00", "#458B00", "#68228B", "#FFA500")

com.pcoa.points.bind$diversity_status <- factor(com.pcoa.points.bind$diversity_status, levels = c("O", "CEN", "C", "N", "E", "CE", "CN", "EN"), labels = c("BF", "CEN", "C", "N", "E", "CE", "CN", "EN"))

ordination6 <- ggplot(data = com.pcoa.points.bind, aes(x = Axis1, y = Axis2)) +
        geom_point(aes(shape = cont.comp, color = diversity_status, size = 5)) + 
        scale_shape_manual(" ", 
                           values = c( "con.rhi" = 15, #2
                                       "con.bul" = 16, #5
                                       "phe.rhi" = 17, #17
                                       "phe.bul" = 18)) + #18 
        scale_color_manual(" ", 
                           values = c( "BF" = "#DCDCDC", 
                                       "C" = "#1874CD", 
                                       "E" = "#FFFF00", 
                                       "N" = "#FF0000",
                                       "CE" = "#458B00", 
                                       "CN" = "#68228B", 
                                       "EN" = "#FFA500", 
                                       "CEN" = "#707070")) +
        labs(fill = " ", shape = " ") +
        xlab("PCoA axis1 = 28.77 %") + 
        ylab("PCoA axis2 = 6.12 %") + 
        ggtitle("PCoA of Fungi Community") +
        theme_classic() +
        theme(axis.title.x = element_text(size = 24, face = "bold"),
                     axis.text.x = element_blank(),
                     axis.ticks.x = element_blank(),
                     axis.title.y = element_text(size = 24, face = "bold"),
                     axis.text.y = element_text(size = 20),
                     legend.position = "bottom",
                     axis.line = element_line(size = 1),
                     plot.title = element_text(hjust = 7)) 
ordination6
ggsave(file = here("output23", "figures", "its_PCoA_same_color_figs.eps"), ordination6.its, width = 7, units = "in")
ggsave(file = here("output23", "figures", "its_PCoA_same_color_figs.pdf"), ordination6.its, width = 7, units = "in")
ggsave(file = here("output23", "figures", "its_PCoA_same_color_figs.svg"), ordination6.its, width = 7, units = "in")
```

## Prokaryota
### Permanova
```{r Permanova - 16S}
set.seed(18575748)
otu.dist.16Sa <- vegdist(com16.sorted, method = "bray")
otu.perm.16Sa <- adonis2(otu.dist.16Sa~contamination*compartment*diversity_status, groups = block, data = meta16.sorted )
otu.perm.16Sa
#write.table(otu.perm.16Sa$aov.tab, file = "Permanova16Sdiversity.contamination.compartment.txt", sep = "\t", dec = ".")
#table2spreadsheet(x = otu.perm.16Sa, file = here::here("output23", "tables", "16s_permanova_div-cont-comp"), type = "XLS", append = TRUE, sheetName = "16s-permnv", digits = 2, add.rownames = TRUE)
```

### PCoA calculation
```{r PCoA - Matrix and eigenvalues - 16S}
com16.dist <- vegdist(com16.sorted,method = "bray") 
com16.pcoa <- cmdscale(sqrt(com16.dist), eig = T) #eliminate negative eigenvalues
explainedvar1 <- (com16.pcoa$eig[1]/sum(com16.pcoa$eig)*100)#Axis1 the first axis explains 6.85% of the variance
explainedvar2 <- (com16.pcoa$eig[2]/sum(com16.pcoa$eig)*100)#Axis2 the second axis explains 3.39% of the variance
sumeigen <- (explainedvar1 + explainedvar2)# # toghether, axis 1 and 2 explain 11.43% of the variance.
com.pcoa.points <- data.frame(com16.pcoa$points) # create a column with the coordinates for each sample
colnames(com.pcoa.points) <- c("Axis1", "Axis2") # rename coordinate columns
com.pcoa.points.bind <- cbind(com.pcoa.points,meta16.sorted) #Everything need to be in the same object, ordered comunity and ordered metadata
# ------- erase anything we don't need anymore ----- #
to_delete = c("sumeigen", "explainedvar1", "explainvar2")
rm(list = to_delete)
```

### PCoA plotting
```{r}
com.pcoa.points.bind$diversity_status <- factor(com.pcoa.points.bind$diversity_status, levels = c("O", "CEN", "C", "N", "E", "CE", "CN", "EN"), labels = c("BF", "CEN", "C", "N", "E", "CE", "CN", "EN"))

ordination6.16s <- ggplot(data = com.pcoa.points.bind, aes(x = Axis1, y = Axis2)) +
        geom_point(aes(shape = cont.comp, color = diversity_status, size = 5)) + 
        
        scale_shape_manual(" ", 
                           values = c( "con.rhi" = 15, #2
                                       "con.bul" = 16, #5
                                       "phe.rhi" = 17, #17
                                       "phe.bul" = 18)) +  #18
        scale_color_manual(" ", 
                           values = c( "BF" = "#DCDCDC", 
                                       "C" = "#1874CD", 
                                       "E" = "#FFFF00", 
                                       "N" = "#FF0000",
                                       "CE" = "#458B00", 
                                       "CN" = "#68228B", 
                                       "EN" = "#FFA500", 
                                       "CEN" = "#707070")) +
        labs(fill = " ", shape = " ") +
        xlab("PCoA axis1 = 6.85 %") + 
        ylab("PCoA axis2 = 3.39 %") + 
        ggtitle("PCoA of Bacterial and Archaeal Community") +
        theme_classic() +
        theme(axis.title.x = element_text(size = 24, face = "bold"),
                     axis.text.x = element_blank(),
                     axis.ticks.x = element_blank(),
                     axis.title.y = element_text(size = 24, face = "bold"),
                     axis.text.y = element_text(size = 20),
                     legend.position = "bottom",
                     axis.line = element_line(size = 1),
                     plot.title = element_text(hjust = 7)) 
ordination6.16s
ggsave(file = here("output23", "figures", "16s_PCoA_same_color_figs.eps"), ordination6.its, width = 7, units = "in")
ggsave(file = here("output23", "figures", "16s_PCoA_same_color_figs.pdf"), ordination6.its, width = 7, units = "in")
ggsave(file = here("output23", "figures", "16s_PCoA_same_color_figs.svg"), ordination6.its, width = 7, units = "in")
```

## Gram Negative

### PERMANOVA
```{r Permanova - gn}
set.seed(18575748)
otu.dist.gna <- vegdist(comgn.sorted, method = "bray")
otu.perm.gna <- adonis2(otu.dist.gna~contamination*compartment*diversity_status, groups = block, data = metagn.sorted_noout )
otu.perm.gna
#write.table(otu.perm.gna$aov.tab, file = "Permanovagndiversity.contamination.compartment.txt", sep = "\t", dec = ".")
#table2spreadsheet(x = otu.perm.gna, file = here::here("output23", "tables", "gn_permanova_div-cont-comp"), type = "XLS", append = TRUE, sheetName = "gn-permnv", digits = 2, add.rownames = TRUE)
```

### PCoA calculation
```{r PCoA - Matrix and eigenvalues - gn}
comgn.dist <- vegdist(comgn.sorted,method = "bray") 
comgn.pcoa <- cmdscale(sqrt(comgn.dist), eig = T) 
explainedvar1 <- (comgn.pcoa$eig[1]/sum(comgn.pcoa$eig)*100)#Axis1 the first axis explains 27.69% of the variance
explainedvar2 <- (comgn.pcoa$eig[2]/sum(comgn.pcoa$eig)*100)#Axis2 the second axis explains 13.60% of the variance
sumeigen <- (explainedvar1 + explainedvar2) # toghether, axis 1 and 2 explain 41.29% of the variance.
com.pcoa.points <- data.frame(comgn.pcoa$points) # create a column with the coordinates for each sample
colnames(com.pcoa.points) <- c("Axis1", "Axis2") # rename coordinate columns
com.pcoa.points.bind <- cbind(com.pcoa.points,metagn.sorted) 
to_delete = c("sumeigen", "explainedvar1", "explainvar2") # erase anything we don't need anymore
rm(list = to_delete)
```

### PCoA plotting
```{r}
com.pcoa.points.bind$diversity_status <- factor(com.pcoa.points.bind$diversity_status, levels = c("O", "CEN", "C", "N", "E", "CE", "CN", "EN"), labels = c("BF", "CEN", "C", "N", "E", "CE", "CN", "EN"))
ordination6.gn <- ggplot(data = com.pcoa.points.bind, aes(x = Axis1, y = Axis2)) +
        geom_point(aes(shape = cont.comp, color = diversity_status, size = 5)) + 
        scale_shape_manual(" ", 
                           values = c( "con.rhi" = 15, #2
                                       "con.bul" = 16, #5
                                       "phe.rhi" = 17, #17
                                       "phe.bul" = 18)) +  #18
        scale_color_manual(" ", 
                           values = c( "BF" = "#DCDCDC", 
                                       "C" = "#1874CD", 
                                       "E" = "#FFFF00", 
                                       "N" = "#FF0000",
                                       "CE" = "#458B00", 
                                       "CN" = "#68228B", 
                                       "EN" = "#FFA500", 
                                       "CEN" = "#707070" )) +
        labs(fill = " ", shape = " ") +
        xlab("PCoA axis1 = 27.69 %") + 
        ylab("PCoA axis2 = 13.60 %") + 
        ggtitle("PCoA of PAH GN bacterial degraders") +
        theme_classic() +
        theme(axis.title.x = element_text(size = 24, face = "bold"),
                     axis.text.x = element_blank(),
                     axis.ticks.x = element_blank(),
                     axis.title.y = element_text(size = 24, face = "bold"),
                     axis.text.y = element_text(size = 20),
                     legend.position = "bottom",
                     axis.line = element_line(size = 1),
                     plot.title = element_text(hjust = 7)) 
ordination6.gn
ggsave(file = here("output23", "figures", "gn_PCoA_same_color_figs.eps"), ordination6.gn, width = 7, units = "in")
ggsave(file = here("output23", "figures", "gn_PCoA_same_color_figs.pdf"), ordination6.gn, width = 7, units = "in")
ggsave(file = here("output23", "figures", "gn_PCoA_same_color_figs.svg"), ordination6.gn, width = 7, units = "in")
```


## Gram Positive

### PERMANOVA
```{r Permanova - gp}
set.seed(18575748)
otu.dist.gpa <- vegdist(comgp.sorted, method = "bray")
otu.perm.gpa <- adonis2(otu.dist.gpa~contamination*compartment*diversity_status, groups = block, data = metagp.sorted )
otu.perm.gpa
#table2spreadsheet(x = otu.perm.gpa, file = here::here("output23", "tables", "gp_permanova_div-cont-comp"), type = "XLS", append = TRUE, sheetName = "gnp-permnv", digits = 2, add.rownames = TRUE)
```

### PcoA calculation
```{r PCoA - Matrix and eigenvalues - gp}
comgp.dist <- vegdist(comgp.sorted,method = "bray") # 
comgp.pcoa <- cmdscale(sqrt(comgp.dist), eig = T) 
explainedvar1 <- (comgp.pcoa$eig[1]/sum(comgp.pcoa$eig)*100)#Axis1 the first axis explains 11.53% of the variance
explainedvar2 <- (comgp.pcoa$eig[2]/sum(comgp.pcoa$eig)*100)#Axis2 the second axis explains 9.20% of the variance
sumeigen <- (explainedvar1 + explainedvar2) # toghether, axis 1 and 2 explain 20.74% of the variance.
com.pcoa.points <- data.frame(comgp.pcoa$points) # create a column with the coordinates for each sample
colnames(com.pcoa.points) <- c("Axis1", "Axis2") # rename coordinate columns
com.pcoa.points.bind <- cbind(com.pcoa.points,metagp.sorted) #Everything need to be in the same object, ordered comunity and ordered metadata
to_delete = c("sumeigen", "explainedvar1", "explainvar2") # erase anything we don't need anymore
rm(list = to_delete)
```

PCoA plot approved for publication
```{r}
com.pcoa.points.bind$diversity_status <- factor(com.pcoa.points.bind$diversity_status, levels = c("O", "CEN", "C", "N", "E", "CE", "CN", "EN"), labels = c("BF", "CEN", "C", "N", "E", "CE", "CN", "EN"))

ordination6.gp <- ggplot(data = com.pcoa.points.bind, aes(x = Axis1, y = Axis2)) +
        geom_point(aes(shape = cont.comp, color = diversity_status, size = 5)) + 
        scale_shape_manual(" ", 
                           values = c( "con.rhi" = 15, #2
                                       "con.bul" = 16, #5
                                       "phe.rhi" = 17, #17
                                       "phe.bul" = 18)) +  #18
        scale_color_manual(" ", 
                           values = c( "BF" = "#DCDCDC", 
                                       "C" = "#1874CD", 
                                       "E" = "#FFFF00", 
                                       "N" = "#FF0000",
                                       "CE" = "#458B00", 
                                       "CN" = "#68228B", 
                                       "EN" = "#FFA500", 
                                       "CEN" = "#707070")) +
        labs(fill = " ", shape = " ") +
        xlab("PCoA axis1 = 11.53 %") + 
        ylab("PCoA axis2 = 9.20 %") + 
        ggtitle("PCoA of PAH GP bacterial degraders") +
        theme_classic() +
        theme(axis.title.x = element_text(size = 24, face = "bold"),
                     axis.text.x = element_blank(),
                     axis.ticks.x = element_blank(),
                     axis.title.y = element_text(size = 24, face = "bold"),
                     axis.text.y = element_text(size = 20),
                     legend.position = "bottom",
                     axis.line = element_line(linewidth = 1),
                     plot.title = element_text(hjust = 7)) 
ordination6.gp
ggsave(file = here("output23", "figures", "gp_PCoA_same_color_figs.eps"), ordination6.gp, width = 7, units = "in")
ggsave(file = here("output23", "figures", "gp_PCoA_same_color_figs.pdf"), ordination6.gp, width = 7, units = "in")
ggsave(file = here("output23", "figures", "gp_PCoA_same_color_figs.svg"), ordination6.gp, width = 7, units = "in")
```


# ----------------------------------------------

# 2.3 MICROBIAL COM COMPOSITION

## Fungi

Once we have the data sets (communities at phylum and class levels and metadata, for treatment clasification), we order the data frames and check them.

### Order and check DFs
```{r}
phylum.its = phylum.its[order(row.names(phylum.its)),]
class.its = class.its[order(row.names(class.its)),]
genus.its = genus.its[order(row.names(genus.its)),]
treat = treat[order(row.names(treat)),]
treat.its = treat[rownames(treat) %in% rownames(phylum.its),]
row.names(treat.its) == row.names(phylum.its)
row.names(treat.its) == row.names(class.its)
row.names(treat.its) == row.names(genus.its)
```

### Phylum
#### Remove low abundance
```{r}
its = class.its
its.abund = its[,colMeans(its) > 0.001]
```

#### Clean column names
```{r}
colnames(its.abund)
colnames(its.abund) = gsub("k__Fungi.p__Ascomycota.c__","",colnames(its.abund))#Arrange headers
colnames(its.abund) = gsub("k__Fungi.p__Basidiomycota.c__","",colnames(its.abund))#Arrange headers
colnames(its.abund) = gsub("k__Fungi.p__Chytridiomycota.c__","",colnames(its.abund))#Arrange headers
colnames(its.abund) = gsub("k__Fungi.p__Kickxellomycota.c__","",colnames(its.abund))#Arrange headers
colnames(its.abund) = gsub("k__Fungi.p__Mortierellomycota.c__","",colnames(its.abund))#Arrange headers
colnames(its.abund) = gsub("k__Fungi.p__Oomycota.c__","",colnames(its.abund))#Arrange headers
colnames(its.abund) = gsub("k__Fungi.p__Ascomycota.Other"," Ascomycota other",colnames(its.abund))#Arrange headers
colnames(its.abund) = gsub("k__Fungi.p__Chytridiomycota.Other","Chytridiomycota other",colnames(its.abund))#Arrange headers
colnames(its.abund) = gsub("p__Blastocladiomycota.c__","",colnames(its.abund))#Arrange headers
colnames(its.abund) = gsub("k__Fungi.Other.Other","Other Fungi",colnames(its.abund))#Arrange headers
colnames(its.abund) = gsub("k__Fungi.","",colnames(its.abund))#Arrange headers
```

#### Bind metadata and abundance
```{r}
its.treat = cbind(treat.its[,1:11],its.abund)
```

#### Melt data and factor SFMIC
```{r}
its.long = gather(its.treat,Taxa,RelAbund,12:19) #transform in long format for ggplot with library 'Rmisc'
head(its.long)
its.long$diversity_status <- factor(its.long$diversity_status, levels = c("O", "C", "N", "E", "CN", "CE", "EN", "CEN"))
```

#### Plot
```{r}
palette(c(brewer.pal(n = 13, name = "Set1"),"brown1", "dodgerblue3", "gold", "forestgreen", "gray35", "deeppink3", "lightsalmon3", "darkseagreen3", "darkorange1", "dodgerblue4", "gray77", "orchid4", "seagreen3"))

phylum.its.stack = ggplot(its.long, aes(fill = Taxa, y = RelAbund, x = diversity_status)) + 
   geom_bar(stat = "identity", position = "fill") +
   ylab("Relative abundance") + 
   theme_bw() +
   scale_fill_manual(values = palette(), guide = guide_legend(label.theme = element_text(face = "italic", size = 8))) +
    scale_color_manual(values = palette(), guide = guide_legend(label.theme = element_text(face = "italic", size = 8))) +
   facet_grid(.~ contamination + compartment ,  scales = "free_x", space = "free_x") +
   scale_y_continuous(limits = c(0,1), expand = c(0,0)) +
scale_x_discrete(name = "Food web complexity treatment * Contamination  * Soil Compartment") +
   theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1))
phylum.its.stack
#ggsave(file = here("output23", "figures", "its_relAbund_phylum.eps"), phylum.its.stack, width = 7, units = "in")
#ggsave(file = here("output23", "figures", "its_relAbund_phylum.pdf"), phylum.its.stack, width = 7, units = "in")
#ggsave(file = here("output23", "figures", "its_relAbund_phylum.svg"), phylum.its.stack, width = 7, units = "in")
```

### Genus
Remove low abundance
```{r}
its = genus.its
its.abund = its[,colMeans(its) > 0.005]
```

Clean column names
```{r}
colnames(its.abund)
colnames(its.abund) = gsub("k__Fungi.Other.Other.Other.Other.Other"," Fungi -",colnames(its.abund))
colnames(its.abund) = gsub("k__Fungi.p__Ascomycota.Other.Other.Other.Other"," Ascomycota -",colnames(its.abund))
colnames(its.abund) = gsub("k__Fungi.p__Ascomycota.c__Dothideomycetes.o__Capnodiales.f__Cladosporiaceae.g__Cladosporium","Cladosporium",colnames(its.abund))
colnames(its.abund) = gsub("k__Fungi.p__Ascomycota.c__Dothideomycetes.o__Pleosporales.f__Pleosporaceae.g__Alternaria","Alternaria",colnames(its.abund))
colnames(its.abund) = gsub("k__Fungi.p__Ascomycota.c__Lecanoromycetes.o__Ostropales.Other.Other","Ostropales -",colnames(its.abund))
colnames(its.abund) = gsub("k__Fungi.p__Ascomycota.c__Lecanoromycetes.o__Ostropales.f__Graphidaceae.g__Platygramme","Platygramme",colnames(its.abund))
colnames(its.abund) = gsub("k__Fungi.p__Ascomycota.c__Leotiomycetes.o__Helotiales.f__Dermateaceae.g__Pseudofabraea","Pseudofabraea",colnames(its.abund))
colnames(its.abund) = gsub("k__Fungi.p__Ascomycota.c__Pezizomycetes.o__Pezizales.f__Pyronemataceae.g__Sphaerosporella","Sphaerosporella",colnames(its.abund))
colnames(its.abund) = gsub("k__Fungi.p__Ascomycota.c__Sordariomycetes.o__Hypocreales.f__Nectriaceae.g__Gibberella"," Gibberella ",colnames(its.abund))
colnames(its.abund) = gsub("k__Fungi.p__Ascomycota.c__Sordariomycetes.o__Sordariales.f__Chaetomiaceae.g__Chaetomium","Chaetomium",colnames(its.abund))
colnames(its.abund) = gsub("k__Fungi.p__Ascomycota.c__Sordariomycetes.o__Sordariales.f__Chaetomiaceae.g__Zopfiella","Zopfiella",colnames(its.abund))
colnames(its.abund) = gsub("k__Fungi.p__Basidiomycota.c__Cystobasidiomycetes.o__Cystobasidiales.f__Cystobasidiaceae.g__Cystobasidium","Cystobasidium",colnames(its.abund))
colnames(its.abund) = gsub("k__Fungi.p__Basidiomycota.c__Microbotryomycetes.o__Sporidiobolales.f__Sporidiobolaceae.g__Rhodotorula","Rhodotorula",colnames(its.abund))
colnames(its.abund) = gsub("k__Fungi.p__Mortierellomycota.c__Mortierellomycetes.o__Mortierellales.f__Mortierellaceae.g__Mortierella","Mortierella",colnames(its.abund))
its.abund$Others = 1 - rowSums(its.abund)#Add an "Other" category
colnames(its.abund) # clean names now
```

Bind metadata and abundance
```{r}
its.treat = cbind(treat.its[,2:8],its.abund)
dim(its.treat) #  191  21
```

Melt data and factor SFMIC
```{r}
its.long = gather(its.treat,Taxa,RelAbund,8:22) #transform in long format for ggplot with library 'Rmisc'
head(its.long)
#its.long$diversity_status[is.na(its.long$diversity_status)] <- "BF"
its.long$diversity_status <- factor(its.long$diversity_status, levels = c("BF", "CEN", "C", "N", "E", "CE", "CN", "EN" ), labels = c("BF", "CEN", "C", "N", "E", "CE", "CN", "EN"))
```

Plot
```{r}
CPCOLS <- c("#33a02c", "#e31a1c", "#1f78b4", "#FF7F24", "#FFFF00", "#E3E3E3",  "#B03060","#EEDC82","#00C5CD", "#8B7765", "#FFC125",  "#030303","#EE799F", "#7AC5CD", "#FF6347")

stack.its <- ggplot(its.long, aes(fill = Taxa, y = RelAbund, x = diversity_status)) + 
   geom_bar(stat = "identity", position = "fill") +
   ylab("Relative abundance") + 
   theme_bw() +
   scale_fill_manual(values = CPCOLS, guide = guide_legend(label.theme = element_text(face = "italic", size = 8))) +
    scale_color_manual(values = CPCOLS, guide = guide_legend(label.theme = element_text(face = "italic", size = 8))) +
   facet_grid(.~ contamination + compartment ,  scales = "free_x", space = "free_x") +
   scale_y_continuous(limits = c(0,1), expand = c(0,0)) +
scale_x_discrete(name = "Food web complexity treatment * Contamination  * Soil Compartment") +
   theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1))
stack.its
ggsave(file = here("output23", "figures", "its_relAbund_genus.eps"), stack.its, width = 7, units = "in")
ggsave(file = here("output23", "figures", "its_relAbund_genus.pdf"), stack.its, width = 7, units = "in")
ggsave(file = here("output23", "figures", "its_relAbund_genus.svg"), stack.its, width = 7, units = "in")
```

Checking the changes in relative abundance at genus level based on treatment
Individual relative abundance ANOVA calculations  - ITS ALL 14 genera
```{r}
# ---- Cladosporium ----
summary(aov(its.treat$Cladosporium~contamination*compartment*diversity_status, data = its.treat))
 #                                           Df  Sum Sq  Mean Sq F value Pr(>F)  
#contamination                                1 0.00970 0.009701   5.710  0.018 *
#compartment                                  1 0.00191 0.001907   1.122  0.291  
#diversity_status                             7 0.02015 0.002879   1.694  0.114  
#contamination:compartment                    1 0.00561 0.005613   3.304  0.071 .
#contamination:diversity_status               7 0.00435 0.000622   0.366  0.921  
#compartment:diversity_status                 7 0.00449 0.000642   0.378  0.914  
#contamination:compartment:diversity_status   7 0.00805 0.001151   0.677  0.691  
#Residuals                                  159 0.27014 0.001699                 

 # ---- Alternaria ----
summary(aov(its.treat$Alternaria~contamination*compartment*diversity_status, data = its.treat))
#                                            Df   Sum Sq   Mean Sq F value  Pr(>F)   
#contamination                                1 0.001940 0.0019397  10.454 0.00149 **
#compartment                                  1 0.000153 0.0001532   0.826 0.36490   
#diversity_status                             7 0.001880 0.0002686   1.447 0.19000   
#contamination:compartment                    1 0.000366 0.0003661   1.973 0.16209   
#contamination:diversity_status               7 0.002292 0.0003274   1.765 0.09793 . 
#compartment:diversity_status                 7 0.000784 0.0001120   0.603 0.75243   
#contamination:compartment:diversity_status   7 0.000673 0.0000961   0.518 0.81990   
#Residuals                                  159 0.029502 0.0001855   
# ---- Ostropales ----
summary(aov(its.treat$`Ostropales -`~contamination*compartment*diversity_status, data = its.treat))
#                                            Df  Sum Sq  Mean Sq F value  Pr(>F)   
#contamination                                1 0.00771 0.007712  10.862 0.00121 **
#compartment                                  1 0.00022 0.000218   0.307 0.58002   
#diversity_status                             7 0.00456 0.000652   0.918 0.49395   
#contamination:compartment                    1 0.00039 0.000389   0.549 0.46001   
#contamination:diversity_status               7 0.00249 0.000355   0.501 0.83310   
#compartment:diversity_status                 7 0.00432 0.000617   0.868 0.53290   
#contamination:compartment:diversity_status   7 0.00448 0.000640   0.902 0.50683   
#Residuals                                  159 0.11289 0.000710  

# ---- Platygramme ----
summary(aov(its.treat$Platygramme~contamination*compartment*diversity_status, data = its.treat))
   #                                         Df Sum Sq  Mean Sq F value Pr(>F)
#contamination                                1 0.0025 0.002533   0.207  0.649
#compartment                                  1 0.0002 0.000230   0.019  0.891
#diversity_status                             7 0.1235 0.017647   1.445  0.191
#contamination:compartment                    1 0.0193 0.019257   1.577  0.211
#contamination:diversity_status               7 0.0871 0.012443   1.019  0.420
#compartment:diversity_status                 7 0.0641 0.009154   0.750  0.630
#contamination:compartment:diversity_status   7 0.0098 0.001402   0.115  0.997
#Residuals                                  159 1.9412 0.012209   
# ---- Pseudofabraea ----
summary(aov(its.treat$Pseudofabraea~contamination*compartment*diversity_status, data = its.treat))
 #                                           Df Sum Sq  Mean Sq F value Pr(>F)
#contamination                                1 0.0048 0.004763   1.835  0.177
#compartment                                  1 0.0031 0.003133   1.207  0.274
#diversity_status                             7 0.0199 0.002836   1.093  0.370
#contamination:compartment                    1 0.0025 0.002497   0.962  0.328
#contamination:diversity_status               7 0.0205 0.002933   1.130  0.347
#compartment:diversity_status                 7 0.0152 0.002169   0.836  0.559
#contamination:compartment:diversity_status   7 0.0151 0.002156   0.831  0.563
#Residuals                                  159 0.4126 0.002595  

# ---- Sphaerosporella ----
summary(aov(its.treat$Sphaerosporella~contamination*compartment*diversity_status, data = its.treat))
#                                            Df Sum Sq Mean Sq F value   Pr(>F)    
#contamination                                1  2.403  2.4027  23.075 3.58e-06 ***
#compartment                                  1  0.045  0.0454   0.436   0.5101    
#diversity_status                             7  1.892  0.2702   2.595   0.0146 *  
#contamination:compartment                    1  0.235  0.2347   2.254   0.1353    
#contamination:diversity_status               7  0.495  0.0707   0.679   0.6898    
#compartment:diversity_status                 7  0.170  0.0243   0.234   0.9765    
#contamination:compartment:diversity_status   7  0.160  0.0229   0.220   0.9803    
#Residuals                                  159 16.557  0.1041                     
# ---- Chaetomium ----
summary(aov(its.treat$Chaetomium~contamination*compartment*diversity_status, data = its.treat))
#                                            Df Sum Sq Mean Sq F value   Pr(>F)    
#contamination                                1 0.0125 0.01246   1.156 0.283941    
#compartment                                  1 0.0082 0.00818   0.759 0.384992    
#diversity_status                             7 0.3158 0.04511   4.184 0.000295 ***
#contamination:compartment                    1 0.0172 0.01719   1.595 0.208527    
#contamination:diversity_status               7 0.1124 0.01606   1.490 0.174488    
#compartment:diversity_status                 7 0.1332 0.01902   1.765 0.097938 .  
#contamination:compartment:diversity_status   7 0.0238 0.00340   0.315 0.946329    
#Residuals                                  159 1.7142 0.01078  

# ---- Zopfiella ----
summary(aov(its.treat$Zopfiella~contamination*compartment*diversity_status, data = its.treat))
#                                            Df Sum Sq Mean Sq F value  Pr(>F)   
#contamination                                1 0.0435 0.04354   3.905 0.04988 * 
#compartment                                  1 0.0060 0.00600   0.538 0.46445   
#diversity_status                             7 0.2292 0.03274   2.936 0.00643 **
#contamination:compartment                    1 0.0112 0.01125   1.009 0.31676   
#contamination:diversity_status               7 0.0853 0.01218   1.093 0.37054   
#compartment:diversity_status                 7 0.0098 0.00140   0.126 0.99638   
#contamination:compartment:diversity_status   7 0.0166 0.00238   0.213 0.98203   
#Residuals                                  159 1.7730 0.01115                   

# ---- Cystobasidium ----
summary(aov(its.treat$Cystobasidium~contamination*compartment*diversity_status, data = its.treat))
#                                            Df  Sum Sq  Mean Sq F value  Pr(>F)   
#contamination                                1 0.00303 0.003026   5.551 0.01969 * 
#compartment                                  1 0.00400 0.003997   7.331 0.00752 **
#diversity_status                             7 0.00673 0.000962   1.764 0.09799 . 
#contamination:compartment                    1 0.00123 0.001227   2.250 0.13559   
#contamination:diversity_status               7 0.00653 0.000933   1.711 0.10981   
#compartment:diversity_status                 7 0.00459 0.000656   1.203 0.30435   
#contamination:compartment:diversity_status   7 0.00390 0.000558   1.023 0.41737   
#Residuals                                  159 0.08669 0.000545   

# ---- Rhodotorula ----
summary(aov(its.treat$Rhodotorula~contamination*compartment*diversity_status, data = its.treat))
     #                                       Df  Sum Sq   Mean Sq F value Pr(>F)  
#contamination                                1 0.00254 0.0025387   5.631 0.0188 *
#compartment                                  1 0.00194 0.0019443   4.312 0.0394 *
#diversity_status                             7 0.00406 0.0005793   1.285 0.2609  
#contamination:compartment                    1 0.00197 0.0019743   4.379 0.0380 *
#contamination:diversity_status               7 0.00352 0.0005028   1.115 0.3562  
#compartment:diversity_status                 7 0.00331 0.0004727   1.048 0.3997  
#contamination:compartment:diversity_status   7 0.00269 0.0003838   0.851 0.5466  
#Residuals                                  159 0.07169 0.0004509 

# ---- Mortierella ----
summary(aov(its.treat$Mortierella~contamination*compartment*diversity_status, data = its.treat))
#                                            Df   Sum Sq   Mean Sq F value  Pr(>F)    
#contamination                                1 0.001159 0.0011591   7.841 0.00574 ** 
#compartment                                  1 0.001720 0.0017202  11.637 0.00082 ***
#diversity_status                             7 0.001641 0.0002344   1.585 0.14326    
#contamination:compartment                    1 0.000323 0.0003227   2.183 0.14152    
#contamination:diversity_status               7 0.000814 0.0001163   0.787 0.59917    
#compartment:diversity_status                 7 0.000798 0.0001140   0.771 0.61223    
#contamination:compartment:diversity_status   7 0.000695 0.0000993   0.672 0.69555    
#Residuals                                  159 0.023503 0.0001478   

# ---- Other Fungi ----
summary(aov(its.treat$` Fungi -`~contamination*compartment*diversity_status, data = its.treat))
#                                            Df Sum Sq  Mean Sq F value   Pr(>F)    
#contamination                                1 0.0185 0.018544   8.480 0.004108 ** 
#compartment                                  1 0.0249 0.024919  11.395 0.000926 ***
#diversity_status                             7 0.0308 0.004403   2.014 0.056496 . #contamination:compartment                    1 0.0039 0.003918   1.791 0.182654    
#contamination:diversity_status               7 0.0050 0.000718   0.328 0.940155    
#compartment:diversity_status                 7 0.0090 0.001293   0.591 0.762514    
#contamination:compartment:diversity_status   7 0.0100 0.001425   0.651 0.712768    
#Residuals                                  159 0.3477 0.002187

# ---- Other Ascomycota ----
summary(aov(its.treat$` Ascomycota -`~contamination*compartment*diversity_status, data = its.treat))
#                                            Df  Sum Sq  Mean Sq F value  Pr(>F)   
#contamination                                1 0.00838 0.008381   5.626 0.01889 * 
#compartment                                  1 0.01561 0.015611  10.480 0.00147 **
#diversity_status                             7 0.01900 0.002714   1.822 0.08641 . 
#contamination:compartment                    1 0.00000 0.000001   0.001 0.97783   
#contamination:diversity_status               7 0.00888 0.001268   0.851 0.54657   
#compartment:diversity_status                 7 0.00576 0.000823   0.553 0.79333   
#contamination:compartment:diversity_status   7 0.00863 0.001233   0.828 0.56572   
#Residuals                                  159 0.23684 0.001490   

# ---- Gibberella ----
summary(aov(its.treat$` Gibberella `~contamination*compartment*diversity_status, data = its.treat))
#                                            Df Sum Sq  Mean Sq F value Pr(>F)  
#contamination                                1 0.0162 0.016179   3.777 0.0537 .
#compartment                                  1 0.0029 0.002920   0.682 0.4102  
#diversity_status                             7 0.0428 0.006117   1.428 0.1975  
#contamination:compartment                    1 0.0001 0.000053   0.012 0.9112  
#contamination:diversity_status               7 0.0351 0.005015   1.171 0.3225  
#compartment:diversity_status                 7 0.0181 0.002588   0.604 0.7518  
#contamination:compartment:diversity_status   7 0.0325 0.004645   1.084 0.3758  
#Residuals                                  159 0.6811 0.004284    

```

```{r  GENUS mean relative abundance - its ALL 14 BY treatment}
mean.rel.abun.fungi = its.treat %>%
  group_by(contamination, compartment, diversity_status) %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
  dplyr::summarise(
    across(where(is.numeric), mean),
    n = n(), 
  )
write.csv(mean.rel.abun.fungi, file ="mean.rel.abun.fungi.csv")

mean.rel.abun.fungi = its.treat %>%
  group_by(contamination) %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
  dplyr::summarise(
    across(where(is.numeric), mean),
    n = n(), 
  )
write.csv(mean.rel.abun.fungi, file ="mean.rel.abun.fungi.contamination.csv")

mean.rel.abun.fungi = its.treat %>%
  group_by(compartment) %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
  dplyr::summarise(
    across(where(is.numeric), mean),
    n = n(), 
  )
write.csv(mean.rel.abun.fungi, file ="mean.rel.abun.fungi.compartment.csv")

mean.rel.abun.fungi = its.treat %>%
  group_by(diversity_status) %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
  dplyr::summarise(
    across(where(is.numeric), mean),
    n = n(), 
  )
write.csv(mean.rel.abun.fungi, file ="mean.rel.abun.fungi.sfwc.csv")

mean.rel.abun.fungi = its.treat %>%
  group_by(cont.comp) %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
  dplyr::summarise(
    across(where(is.numeric), mean),
    n = n(), 
  )
write.csv(mean.rel.abun.fungi, file ="mean.rel.abun.fungi.cont.comp.csv")

#mean.rel.abun.fungi = its.treat$ %>%
  group_by(div.comp) %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
  dplyr::summarise(
    across(where(is.numeric), mean),
    n = n(), 
  )
#write.csv(mean.rel.abun.fungi, file ="mean.rel.abun.fungi.div.comp.csv")

#mean.rel.abun.fungi = its.treat %>%
  group_by(div.cont) %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
  dplyr::summarise(
    across(where(is.numeric), mean),
    n = n(), 
  )
#write.csv(mean.rel.abun.fungi, file ="mean.rel.abun.fungi.div.cont.csv")
```




------ REVISE UP TO HERE


Checking the changes in relative abundance at genus level based on treatment
```{r  GENUS relative abundance ANOVA looping plus differently - its}
genus.its.genus.names <- colnames(genus.its) # start cleaning the names of genus to have clearer format
genus.its.clean <- sub('.*g__', '', genus.its.genus.names)
genus.its.clean.f = sub(".*f__", "", genus.its.clean)
genus.its.clean.o = sub(".*o__", "", genus.its.clean.f)
genus.its.clean.c = sub(".c__", "", genus.its.clean.f)
genus.its.clean.p = sub(".*p__", "", genus.its.clean.c)
colnames(genus.its) = genus.its.clean.p 
genus.its.abund = genus.its[,colMeans(genus.its) > 0.01] # 461 ASV with more than 0.01% presence
treat = metaits.sorted[,3:11] # keep only treatment columns. 
treat = treat[,-8]
treat$nem.cont <- as.factor(paste(treat$contamination, treat$nem, sep = "."))
treat$nem.comp <- as.factor(paste(treat$compartment, treat$nem, sep = "."))
treat$col.comp <- as.factor(paste(treat$compartment, treat$col, sep = "."))
treat$col.cont <- as.factor(paste(treat$contamination, treat$col, sep = "."))
treat$ver.cont <- as.factor(paste(treat$contamination, treat$ver, sep = "."))
treat$ver.comp <- as.factor(paste(treat$compartment, treat$ver, sep = "."))
treat$div.comp <- as.factor(paste(treat$compartment, treat$diversity_status, sep = "."))
treat$div.cont <- as.factor(paste(treat$contamination, treat$diversity_status, sep = "."))
treat$div.cont.comp <- as.factor(paste(treat$cont.comp, treat$diversity_status, sep = "."))

str(treat) # 191 samples for its treatment variables. 

genus.treat = cbind(treat, genus.its.abund) # put all together to perform the anovas
#View(genus.treat[1:5,]) # genus start at colum 18

# creating a loop for ANOVAs and Tukeys of all genus at a time

18:ncol(genus.treat)
AVz <- rep(NA, ncol(genus.treat)) # creates a table with the same number of columns as in genus.treat
sink("ANOVA-Tukeys-genus.its.txt")
for (i in 18:ncol(genus.treat)) {
        column <-  names(genus.treat[i])
        AVz <- summary(aov(genus.treat[,i]~div.cont.comp, data = genus.treat)) 
        tk <- TukeyHSD((aov(genus.treat[,i]~div.cont.comp, data = genus.treat)))
print(column)
print(AVz)
print(tk)
}
sink()

 # in this loop we select only the p values and the F vales for anova
18:ncol(genus.treat)
AVz <- rep(NA, ncol(genus.treat)) # creates a table with the same number of columns as in genus.treat
sink("ANOVA-F-P-values.genus.its.doc")
for (i in 18:ncol(genus.treat)) {
        column <-  names(genus.treat[i])
        AVz <- summary(aov(genus.treat[,i]~div.cont.comp, data = genus.treat)) [[1]] [["F value"]] 
        AVzb <- summary(aov(genus.treat[,i]~div.cont.comp, data = genus.treat)) [[1]] [["Pr(>F)"]]
print(column)
print(AVz)
print(AVzb)
}
sink()


# Now we load the dataset into R 

table.anova.genus <- read.csv( file = "ANOVA-F-P-values.genus.its.doc", header = F)
taxon <- table.anova.genus[seq(from = 1, to = nrow(table.anova.genus), by = 3), 1]
f.fisher <- table.anova.genus[seq(from = 2, to = nrow(table.anova.genus), by = 3), 1]
p.value <- table.anova.genus[seq(from = 3, to = nrow(table.anova.genus), by = 3), 1]
p.value 
table.anova.genus <- data.frame(taxon, f.fisher, p.value)
write.csv(table.anova.genus, file = "table.anova.genus.its.csv") # take out the NA and the [1] in excel for rapidity
table.anova.genus <- read.csv( file = "table.anova.genus.its.csv", header = T)#reimport table.anova.genus wit 9 analyses
bonferroni.anova.genus <- table.anova.genus[table.anova.genus$p.value < 0.05,] # Bonferroni adjusting. We take our alpha divided by the total amount of contrasts (461) - so 0.05/9 = 0.0001


# bonferroni is very strict and therefore, there are no siggnificant differences at this level. We better keep the  table. anova.genus 
write.csv(bonferroni.anova.genus, file = "bonferroni.anova.genus.its.csv")

# Now I need to select the genus that passed the bonferroni threshold in genus.treat, so I can get the necessary exploratory analyses. 


# ---------- for some reason, the few lines of code below didn't work and I had to manually merge the table that I was looking for
#rownames(bonferroni.anova.genus) = bonferroni.anova.genus$taxon # put taxa in row names
#genus.its.abund.t = t(genus.its.abund) # put taxa in rows as in bonferroni.anova.genus to have taxa in row names
#agenus.its.abund.t.match.anova = merge(bonferroni.anova.genus, genus.its.abund.t, by = 0) # select taxa with significant p value of 0.0001 in genus.its.abund.t
write.csv(genus.its.abund.t, file = "genus.its.abund.t.csv") # erase all taxon except Sphaerosporella and CHaetomium which were the ones giving  sign p values
genus.its.abund.t.match.anova <- read.csv( file = "genus.its.abund.t.csv", header = T)
#View(genus.its.abund.t.match.anova)
rownames(genus.its.abund.t.match.anova) = genus.its.abund.t.match.anova$Row.names # put taxa as row names again
genus.its.abund.t.match.anova$Row.names = NULL # Eliminate row.names column with taxa names
genus.its.abund.t.match.anova$taxon = NULL
genus.its.abund.t.match.anova$f.fisher = NULL
genus.its.abund.t.match.anova$p.value = NULL
genus.its.abund.match.anov = t(genus.its.abund.t.match.anova) # transpose matrix 
View(genus.its.abund.match.anov)
genus.its.abund.match.anova.treat = cbind(genus.its.abund.match.anov,treat) # error because 194 samples instead of 191? 

# Calculating mean relative abundance for genus that passed bonferroni based on interaction  Contamination * Compartment
percentages.mean.genus <- genus.its.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(cont.comp) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.genus)
percentages.mean.genus <-  percentages.mean.genus %>% 
   mutate_at(2:ncol(percentages.mean.genus), round, 2)

write.table(percentages.mean.genus, file = "mean.rel.abund.genus.its.cont.comp.txt", sep = "\t", dec = ".")


# Calculating mean relative abundance for genus that passed bonferroni based on  Contamination level
percentages.mean.genus <- genus.its.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(contamination) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.genus)
percentages.mean.genus <-  percentages.mean.genus %>% 
   mutate_at(2:ncol(percentages.mean.genus), round, 2)

write.table(percentages.mean.genus, file = "mean.rel.abund.genus.its.contamination.txt", sep = "\t", dec = ".")

# Calculating mean relative abundance for genus that passed bonferroni based on interaction  Compartment level
percentages.mean.genus <- genus.its.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(compartment) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.genus)
percentages.mean.genus <-  percentages.mean.genus %>% 
   mutate_at(2:ncol(percentages.mean.genus), round, 2)

write.table(percentages.mean.genus, file = "mean.rel.abund.genus.its.compartment.txt", sep = "\t", dec = ".")

# Calculating mean relative abundance for genus that passed bonferroni based on interaction Diversity * Contamination * Compartment
percentages.mean.genus <- genus.its.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(div.cont.comp) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.genus)
percentages.mean.genus <-  percentages.mean.genus %>% 
   mutate_at(2:ncol(percentages.mean.genus), round, 2)

write.table(percentages.mean.genus, file = "mean.rel.abund.genus.its.div.cont.comp.txt", sep = "\t", dec = ".")

# Calculating mean relative abundance for genus that passed bonferroni based on interaction  Earthworm level
percentages.mean.genus <- genus.its.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(ver) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.genus)
percentages.mean.genus <-  percentages.mean.genus %>% 
   mutate_at(2:ncol(percentages.mean.genus), round, 2)

write.table(percentages.mean.genus, file = "mean.rel.abund.genus.its.compartment.txt", sep = "\t", dec = ".")
# Tyding up 
rm(genus.its.abund.t.match.anova)
rm(genus.its.abund.match.anov)
```
Checking the changes in relative abundance at phylum level based on treatment
```{r  PHYLA relative abundance ANOVA looping plus differently - its}
phylum.treat = cbind(treat,its.abund) # working with its.treat for ANOVA from chunk relative abundance stackbars- phyla-its
tx <- with(its.treat, interaction(its.treat$diversity_status, its.treat$compartment, its.treat$contamination))

#View(its.treat[1:5,]) # genus start at colum 18
# in this loop we select only the p values and the F vales for anova
18:ncol(phylum.treat)
AVz <- rep(NA, ncol(phylum.treat)) # creates a table with the same number of columns as in phylum.treat
sink("ANOVA-F-P-values.phylum.doc")
for (i in 18:ncol(phylum.treat)) {
        column <-  names(phylum.treat[i])
        AVz <- summary(aov(phylum.treat[,i]~div.cont.comp, data = phylum.treat)) [[1]] [["F value"]] 
        AVzb <- summary(aov(phylum.treat[,i]~div.cont.comp, data = phylum.treat)) [[1]] [["Pr(>F)"]]
print(column)
print(AVz)
print(AVzb)
}
sink()

# Now we load the dataset into R 

table.anova.phylum <- read.csv( file = "ANOVA-F-P-values.phylum.doc", header = F)
taxon <- table.anova.phylum[seq(from = 1, to = nrow(table.anova.phylum), by = 3), 1]
f.fisher <- table.anova.phylum[seq(from = 2, to = nrow(table.anova.phylum), by = 3), 1]
p.value <- table.anova.phylum[seq(from = 3, to = nrow(table.anova.phylum), by = 3), 1]
p.value 
table.anova.phylum <- data.frame(taxon, f.fisher, p.value)
write.csv(table.anova.phylum, file = "table.anova.phylum.csv") # take out the NA and the [1] in excel for rapidity
# Now go to excel and eliminate [1] and NAs
table.anova.phylum <- read.csv( file = "table.anova.phylum.csv", header = T)#reimport table.anova.phylum wit 461 analyses
bonferroni.anova.phylum <- table.anova.phylum[table.anova.phylum$p.value < 0.0035,] # Bonferroni adjusting. We take our alpha divided by the total amount of contrasts (461) - so 0.05/461 = 0.0001
write.csv(bonferroni.anova.phylum, file = "bonferroni.anova.phylum.its.csv")

# Now I need to select the phylum that passed the bonferroni threshold in phylum.treat, so I can get the necessary exploratory analyses. 
phylum.its.abund = its.abund
rownames(bonferroni.anova.phylum) = bonferroni.anova.phylum$taxon # put taxa in row names
phylum.its.abund.t = t(phylum.its.abund) # put taxa in rows as in bonferroni.anova.phylum to have taxa in row names
phylum.its.abund.t.match.anova = merge(phylum.its.abund.t, bonferroni.anova.phylum, by = 0) # select taxa with significant p value of 0.0001 in phylum.its.abund.t
rownames(phylum.its.abund.t.match.anova) = phylum.its.abund.t.match.anova$Row.names # put taxa as row names again
phylum.its.abund.t.match.anova$Row.names = NULL # Eliminate row.names column with taxa names
phylum.its.abund.t.match.anova$taxon = NULL
phylum.its.abund.t.match.anova$f.fisher = NULL
phylum.its.abund.t.match.anova$p.value = NULL
phylum.its.abund.match.anov = t(phylum.its.abund.t.match.anova) # transpose matrix 

phylum.its.abund.match.anova.treat = cbind(phylum.its.abund.match.anov,treat) # error because 194 samples instead of 191? 

# Calculating mean relative abundance for phylum that passed bonferroni based on interaction  Contamination * Compartment
percentages.mean.phylum <- phylum.its.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(cont.comp) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.phylum)
percentages.mean.phylum <-  percentages.mean.phylum %>% 
   mutate_at(2:ncol(percentages.mean.phylum), round, 2)

write.table(percentages.mean.phylum, file = "mean.rel.abund.phylum.its.cont.comp.txt", sep = "\t", dec = ".")

# Calculating mean relative abundance for phylum that passed bonferroni based on  Contamination level
percentages.mean.phylum <- phylum.its.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(contamination) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.phylum)
percentages.mean.phylum <-  percentages.mean.phylum %>% 
   mutate_at(2:ncol(percentages.mean.phylum), round, 2)

write.table(percentages.mean.phylum, file = "mean.rel.abund.phylum.its.contamination.txt", sep = "\t", dec = ".")

# Calculating mean relative abundance for phylum that passed bonferroni based on interaction  Compartment level
percentages.mean.phylum <- phylum.its.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(compartment) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.phylum)
percentages.mean.phylum <-  percentages.mean.phylum %>% 
   mutate_at(2:ncol(percentages.mean.phylum), round, 2)

write.table(percentages.mean.phylum, file = "mean.rel.abund.phylum.its.compartment.txt", sep = "\t", dec = ".")

# Calculating mean relative abundance for phylum that passed bonferroni based on interaction Diversity * Contamination * Compartment
percentages.mean.phylum <- phylum.its.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(div.cont.comp) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.phylum)
percentages.mean.phylum <-  percentages.mean.phylum %>% 
   mutate_at(2:ncol(percentages.mean.phylum), round, 2)

write.table(percentages.mean.phylum, file = "mean.rel.abund.phylum.its.div.cont.comp.txt", sep = "\t", dec = ".")

# Calculating mean relative abundance for phylum that passed bonferroni based on interaction  Earthworm level
percentages.mean.phylum <- phylum.its.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(ver) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.phylum)
percentages.mean.phylum <-  percentages.mean.phylum %>% 
   mutate_at(2:ncol(percentages.mean.phylum), round, 2)

write.table(percentages.mean.phylum, file = "mean.rel.abund.phylum.its.compartment.txt", sep = "\t", dec = ".")


# Tyding up 
rm(phylum.its.abund.t.match.anova)
rm(phylum.its.abund.match.anov)
```

## Prokariota

Relative abundance stack bars graphs
```{r Relative abundance stackbars - Phyla - 16S}
# Once we have the data sets (communities at phylum and class levels and metadata, for treatment clasification), we order the data frames and check them.
# ---- ordering and checking ----- #
phylum.prok = phylum.prok[order(row.names(phylum.prok)),]
class.prok = class.prok[order(row.names(class.prok)),]
genus.prok = genus.prok[order(row.names(genus.prok)),]
treat.16s = treat[order(row.names(treat)),]
row.names(treat.16s)
row.names(phylum.prok)
treat.16s = treat.16s[rownames(treat.16s) %in% rownames(phylum.prok),]
row.names(phylum.prok) == row.names(class.prok)
row.names(treat.16s) == row.names(phylum.prok)
row.names(treat.16s) == row.names(class.prok)
row.names(treat.16s) == row.names(genus.prok)

# --- remove low abundace ----- #
#Keep proteobacteria classes and then remove low abundance
names(phylum.prok)
phylum.prok <- phylum.prok[, !grepl("Proteobacteria", names(phylum.prok))]
prok = cbind(phylum.prok, class.prok[,grep("proteobacteria", colnames(class.prok))])
prok.abund = prok[,colMeans(prok) > 0.01]
colnames(prok.abund)

colnames(prok.abund) = gsub("k__Bacteria.p__","",colnames(prok.abund))#Arrange headers
colnames(prok.abund) = gsub("Proteobacteria.c__","",colnames(prok.abund))#Arrange headers
colnames(prok.abund) = gsub("k__Archaea.p__","",colnames(prok.abund))#Arrange headers
prok.abund$Others = 1 - rowSums(prok.abund)#Add an "Other" category
prok.treat = cbind(treat.16s[,1:11],prok.abund)
```


```{r Relative abundance stackbars - Phyla - 16S}
head(prok.treat)
#--- plotting ggplot stack bars ----- #
str(treat.16s)
prok.long = gather(prok.treat,Taxa,RelAbund,12:ncol(prok.treat)) #transform in long format for ggplot with library 'Rmisc'
head(prok.long)

prok.long$diversity_status <- factor(prok.long$diversity_status, levels = c("O", "CEN", "C", "N", "E", "CE", "CN", "EN" ), labels = c("BF", "CEN", "C", "N", "E", "CE", "CN", "EN"))

CPCOLS <- c("#33a02c", "#e31a1c", "#1f78b4", "#FF7F24", "#FFFF00", "#E3E3E3",  "#B03060","#EEDC82","#00C5CD", "#8B7765", "#FFC125",  "#030303","#EE799F", "#7AC5CD", "#FF6347")

stack.16s = ggplot(prok.long, aes(fill = Taxa, y = RelAbund, x = diversity_status)) + 
   geom_bar(stat = "identity", position = "fill") +
   ylab("Relative abundance") + 
   theme_bw() +
   scale_fill_manual(values = CPCOLS, guide = guide_legend(label.theme = element_text(face = "italic", size = 8))) +
    scale_color_manual(values = CPCOLS, guide = guide_legend(label.theme = element_text(face = "italic", size = 8))) +
   facet_grid(.~ contamination + compartment ,  scales = "free_x", space = "free_x") +
   scale_y_continuous(limits = c(0,1), expand = c(0,0)) +
scale_x_discrete(name = "Food web complexity treatment * Contamination  * Soil Compartment") +
   theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1))
stack.16s
#ggsave(file = here("output23", "figures", "16s_relAbund_phylum.eps"), stack.16s, width = 7, units = "in")
#ggsave(file = here("output23", "figures", "16s_relAbund_phylum.pdf"), stack.16s, width = 7, units = "in")
#ggsave(file = here("output23", "figures", "16s_relAbund_phylum.svg"), stack.16s, width = 7, units = "in")
```
Checking the changes in relative abundance at genus level based on treatment
```{r  GENUS relative abundance ANOVA looping plus differently - 16s}

genus.prok.genus.names <- colnames(genus.prok) # start cleaning the names of genus to have clearer format
genus.prok.clean <- sub('.*g__', '', genus.prok.genus.names)
genus.prok.clean.f = sub(".*f__", "", genus.prok.clean)
genus.prok.clean.o = sub(".*o__", "", genus.prok.clean.f)
genus.prok.clean.c = sub(".c__", "", genus.prok.clean.f)
genus.prok.clean.p = sub(".*p__", "", genus.prok.clean.c)
colnames(genus.prok) = genus.prok.clean.p 
genus.prok.abund = genus.prok[,colMeans(genus.prok) > 0.0001] # 461 ASV with more than 0.01% presence
treat = meta16.sorted[,3:11] # keep only treatment columns. 
treat = treat[,-8]
treat$nem.cont <- as.factor(paste(treat$contamination, treat$nem, sep = "."))
treat$nem.comp <- as.factor(paste(treat$compartment, treat$nem, sep = "."))
treat$col.comp <- as.factor(paste(treat$compartment, treat$col, sep = "."))
treat$col.cont <- as.factor(paste(treat$contamination, treat$col, sep = "."))
treat$ver.cont <- as.factor(paste(treat$contamination, treat$ver, sep = "."))
treat$ver.comp <- as.factor(paste(treat$compartment, treat$ver, sep = "."))
treat$div.comp <- as.factor(paste(treat$compartment, treat$diversity_status, sep = "."))
treat$div.cont <- as.factor(paste(treat$contamination, treat$diversity_status, sep = "."))
treat$div.cont.comp <- as.factor(paste(treat$cont.comp, treat$diversity_status, sep = "."))

str(treat) # 191 samples for 16 treatment variables. 

genus.treat = cbind(treat, genus.prok.abund) # put all together to perform the anovas
#View(genus.treat[1:5,]) # genus start at colum 18

# creating a loop for ANOVAs and Tukeys of all genus at a time

18:ncol(genus.treat)
AVz <- rep(NA, ncol(genus.treat)) # creates a table with the same number of columns as in genus.treat
sink("ANOVA-Tukeys-genus.txt")
for (i in 18:ncol(genus.treat)) {
        column <-  names(genus.treat[i])
        AVz <- summary(aov(genus.treat[,i]~div.cont.comp, data = genus.treat)) 
        tk <- TukeyHSD((aov(genus.treat[,i]~div.cont.comp, data = genus.treat)))
print(column)
print(AVz)
print(tk)
}
sink()

 # in this loop we select only the p values and the F vales for anova
18:ncol(genus.treat)
AVz <- rep(NA, ncol(genus.treat)) # creates a table with the same number of columns as in genus.treat
sink("ANOVA-F-P-values.genus.doc")
for (i in 18:ncol(genus.treat)) {
        column <-  names(genus.treat[i])
        AVz <- summary(aov(genus.treat[,i]~div.cont.comp, data = genus.treat)) [[1]] [["F value"]] 
        AVzb <- summary(aov(genus.treat[,i]~div.cont.comp, data = genus.treat)) [[1]] [["Pr(>F)"]]
print(column)
print(AVz)
print(AVzb)
}
sink()


# Now we load the dataset into R 

table.anova.genus <- read.csv( file = "ANOVA-F-P-values.genus.doc", header = F)
taxon <- table.anova.genus[seq(from = 1, to = nrow(table.anova.genus), by = 3), 1]
f.fisher <- table.anova.genus[seq(from = 2, to = nrow(table.anova.genus), by = 3), 1]
p.value <- table.anova.genus[seq(from = 3, to = nrow(table.anova.genus), by = 3), 1]
p.value 
table.anova.genus <- data.frame(taxon, f.fisher, p.value)
write.csv(table.anova.genus, file = "table.anova.genus.csv") # take out the NA and the [1] in excel for rapidity
table.anova.genus <- read.csv( file = "table.anova.genus.csv", header = T)#reimport table.anova.genus wit 461 analyses
bonferroni.anova.genus <- table.anova.genus[table.anova.genus$p.value < 0.0001,] # Bonferroni adjusting. We take our alpha divided by the total amount of contrasts (461) - so 0.05/461 = 0.0001
write.csv(bonferroni.anova.genus, file = "bonferroni.anova.genus.16S.csv")

# Now I need to select the genus that passed the bonferroni threshold in genus.treat, so I can get the necessary exploratory analyses. 

rownames(bonferroni.anova.genus) = bonferroni.anova.genus$taxon # put taxa in row names
genus.prok.abund.t = t(genus.prok.abund) # put taxa in rows as in bonferroni.anova.genus to have taxa in row names
genus.prok.abund.t.match.anova = merge(genus.prok.abund.t, bonferroni.anova.genus, by = 0) # select taxa with significant p value of 0.0001 in genus.prok.abund.t
rownames(genus.prok.abund.t.match.anova) = genus.prok.abund.t.match.anova$Row.names # put taxa as row names again
genus.prok.abund.t.match.anova$Row.names = NULL # Eliminate row.names column with taxa names
genus.prok.abund.t.match.anova$taxon = NULL
genus.prok.abund.t.match.anova$f.fisher = NULL
genus.prok.abund.t.match.anova$p.value = NULL
genus.prok.abund.match.anov = t(genus.prok.abund.t.match.anova) # transpose matrix 

genus.prok.abund.match.anova.treat = cbind(genus.prok.abund.match.anov,treat) # error because 194 samples instead of 191? 

# Calculating mean relative abundance for genus that passed bonferroni based on interaction  Contamination * Compartment
percentages.mean.genus <- genus.prok.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(cont.comp) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.genus)
percentages.mean.genus <-  percentages.mean.genus %>% 
   mutate_at(2:28, round, 2)

write.table(percentages.mean.genus, file = "mean.rel.abund.genus.16s.cont.comp.txt", sep = "\t", dec = ".")


# Calculating mean relative abundance for genus that passed bonferroni based on  Contamination level
percentages.mean.genus <- genus.prok.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(contamination) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.genus)
percentages.mean.genus <-  percentages.mean.genus %>% 
   mutate_at(2:28, round, 2)

write.table(percentages.mean.genus, file = "mean.rel.abund.genus.16s.contamination.txt", sep = "\t", dec = ".")

# Calculating mean relative abundance for genus that passed bonferroni based on interaction  Compartment level
percentages.mean.genus <- genus.prok.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(compartment) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.genus)
percentages.mean.genus <-  percentages.mean.genus %>% 
   mutate_at(2:28, round, 2)

write.table(percentages.mean.genus, file = "mean.rel.abund.genus.16s.compartment.txt", sep = "\t", dec = ".")

# Calculating mean relative abundance for genus that passed bonferroni based on interaction Diversity * Contamination * Compartment
percentages.mean.genus <- genus.prok.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(div.cont.comp) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.genus)
percentages.mean.genus <-  percentages.mean.genus %>% 
   mutate_at(2:28, round, 2)

write.table(percentages.mean.genus, file = "mean.rel.abund.genus.16s.div.cont.comp.txt", sep = "\t", dec = ".")

# Calculating mean relative abundance for genus that passed bonferroni based on interaction  Earthworm level
percentages.mean.genus <- genus.prok.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(ver) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.genus)
percentages.mean.genus <-  percentages.mean.genus %>% 
   mutate_at(2:28, round, 2)

write.table(percentages.mean.genus, file = "mean.rel.abund.genus.16s.compartment.txt", sep = "\t", dec = ".")


# Tyding up 
rm(genus.prok.abund.t.match.anova)
rm(genus.prok.abund.match.anov)

```
Checking the changes in relative abundance at phylum level based on treatment
```{r  PHYLA relative abundance ANOVA looping plus differently - 16s}

phylum.treat = cbind(treat,prok.abund) # working with prok.treat for ANOVA from chunk relative abundance stackbars- phyla-16S
tx <- with(prok.treat, interaction(prok.treat$diversity_status, prok.treat$compartment, prok.treat$contamination))



#View(prok.treat[1:5,]) # genus start at colum 18
# in this loop we select only the p values and the F vales for anova
18:ncol(phylum.treat)
AVz <- rep(NA, ncol(phylum.treat)) # creates a table with the same number of columns as in phylum.treat
sink("ANOVA-F-P-values.phylum.doc")
for (i in 18:ncol(phylum.treat)) {
        column <-  names(phylum.treat[i])
        AVz <- summary(aov(phylum.treat[,i]~div.cont.comp, data = phylum.treat)) [[1]] [["F value"]] 
        AVzb <- summary(aov(phylum.treat[,i]~div.cont.comp, data = phylum.treat)) [[1]] [["Pr(>F)"]]
print(column)
print(AVz)
print(AVzb)
}
sink()


# Now we load the dataset into R 

table.anova.phylum <- read.csv( file = "ANOVA-F-P-values.phylum.doc", header = F)
taxon <- table.anova.phylum[seq(from = 1, to = nrow(table.anova.phylum), by = 3), 1]
f.fisher <- table.anova.phylum[seq(from = 2, to = nrow(table.anova.phylum), by = 3), 1]
p.value <- table.anova.phylum[seq(from = 3, to = nrow(table.anova.phylum), by = 3), 1]
p.value 
table.anova.phylum <- data.frame(taxon, f.fisher, p.value)
write.csv(table.anova.phylum, file = "table.anova.phylum.csv") # take out the NA and the [1] in excel for rapidity
# Now go to excel and eliminate [1] and NAs
table.anova.phylum <- read.csv( file = "table.anova.phylum.csv", header = T)#reimport table.anova.phylum wit 461 analyses
bonferroni.anova.phylum <- table.anova.phylum[table.anova.phylum$p.value < 0.0035,] # Bonferroni adjusting. We take our alpha divided by the total amount of contrasts (461) - so 0.05/461 = 0.0001
write.csv(bonferroni.anova.phylum, file = "bonferroni.anova.phylum.16S.csv")

# Now I need to select the phylum that passed the bonferroni threshold in phylum.treat, so I can get the necessary exploratory analyses. 
phylum.prok.abund = prok.abund
rownames(bonferroni.anova.phylum) = bonferroni.anova.phylum$taxon # put taxa in row names
phylum.prok.abund.t = t(phylum.prok.abund) # put taxa in rows as in bonferroni.anova.phylum to have taxa in row names
phylum.prok.abund.t.match.anova = merge(phylum.prok.abund.t, bonferroni.anova.phylum, by = 0) # select taxa with significant p value of 0.0001 in phylum.prok.abund.t
rownames(phylum.prok.abund.t.match.anova) = phylum.prok.abund.t.match.anova$Row.names # put taxa as row names again
phylum.prok.abund.t.match.anova$Row.names = NULL # Eliminate row.names column with taxa names
phylum.prok.abund.t.match.anova$taxon = NULL
phylum.prok.abund.t.match.anova$f.fisher = NULL
phylum.prok.abund.t.match.anova$p.value = NULL
phylum.prok.abund.match.anov = t(phylum.prok.abund.t.match.anova) # transpose matrix 

phylum.prok.abund.match.anova.treat = cbind(phylum.prok.abund.match.anov,treat) # error because 194 samples instead of 191? 

# Calculating mean relative abundance for phylum that passed bonferroni based on interaction  Contamination * Compartment
percentages.mean.phylum <- phylum.prok.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(cont.comp) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.phylum)
percentages.mean.phylum <-  percentages.mean.phylum %>% 
   mutate_at(2:ncol(percentages.mean.phylum), round, 2)

write.table(percentages.mean.phylum, file = "mean.rel.abund.phylum.16s.cont.comp.txt", sep = "\t", dec = ".")


# Calculating mean relative abundance for phylum that passed bonferroni based on  Contamination level
percentages.mean.phylum <- phylum.prok.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(contamination) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.phylum)
percentages.mean.phylum <-  percentages.mean.phylum %>% 
   mutate_at(2:ncol(percentages.mean.phylum), round, 2)

write.table(percentages.mean.phylum, file = "mean.rel.abund.phylum.16s.contamination.txt", sep = "\t", dec = ".")

# Calculating mean relative abundance for phylum that passed bonferroni based on interaction  Compartment level
percentages.mean.phylum <- phylum.prok.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(compartment) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.phylum)
percentages.mean.phylum <-  percentages.mean.phylum %>% 
   mutate_at(2:ncol(percentages.mean.phylum), round, 2)

write.table(percentages.mean.phylum, file = "mean.rel.abund.phylum.16s.compartment.txt", sep = "\t", dec = ".")

# Calculating mean relative abundance for phylum that passed bonferroni based on interaction Diversity * Contamination * Compartment
percentages.mean.phylum <- phylum.prok.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(div.cont.comp) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.phylum)
percentages.mean.phylum <-  percentages.mean.phylum %>% 
   mutate_at(2:ncol(percentages.mean.phylum), round, 2)

write.table(percentages.mean.phylum, file = "mean.rel.abund.phylum.16s.div.cont.comp.txt", sep = "\t", dec = ".")

# Calculating mean relative abundance for phylum that passed bonferroni based on interaction  Earthworm level
percentages.mean.phylum <- phylum.prok.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(ver) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.phylum)
percentages.mean.phylum <-  percentages.mean.phylum %>% 
   mutate_at(2:ncol(percentages.mean.phylum), round, 2)

write.table(percentages.mean.phylum, file = "mean.rel.abund.phylum.16s.compartment.txt", sep = "\t", dec = ".")


# Tyding up 
rm(phylum.prok.abund.t.match.anova)
rm(phylum.prok.abund.match.anov)
```



## Gram Negative 

Relative abundance stack bars graphs
```{r Relative abundance stackbars - genus - gn}
# ordering and checking
phylum.gn <- phylum.gn[order(row.names(phylum.gn)),]
genus.gn <- genus.gn[order(row.names(genus.gn)),]
row.names(treat) = treat$code
treat.gn <- treat[order(row.names(treat)),]
row.names(phylum.gn)
phylum.gn <- phylum.gn[rownames(phylum.gn) %in% rownames(treat.gn),]
treat.gn <- treat.gn[rownames(treat.gn) %in% rownames(phylum.gn),]
treat.gn <- treat.gn[rownames(treat.gn) %in% rownames(genus.gn),]
row.names(phylum.gn) == row.names(genus.gn)
row.names(treat.gn) == row.names(phylum.gn)
row.names(treat.gn) == row.names(genus.gn)

gn = genus.gn
gn.abund = gn[,colMeans(gn) > 0.005]
colnames(gn.abund)

# Define patterns and replacement strings
patterns <- c("k__Bacteria.p__Proteobacteria.c__Gammaproteobacteria.o__Pseudomonadales.f__Pseudomonadaceae.g__Pseudomonas" = "Pseudomonas",
              "k__Bacteria.p__Proteobacteria.c__Gammaproteobacteria.o__Gammaproteobacteria.undef.f__Gammaproteobacteria.undef.g__Gammaproteobacteria.undef" = "Gammaprot. - undef",
              "k__Bacteria.p__Proteobacteria.c__Gammaproteobacteria.o__Enterobacterales.f__Yersiniaceae.g__Rahnella" = "Rahnella",
              "k__Bacteria.p__Proteobacteria.c__Gammaproteobacteria.o__Enterobacterales.f__Enterobacteriaceae.g__Enterobacter" = "Enterobacter",
              "k__Bacteria.p__Proteobacteria.c__Gammaproteobacteria.o__Alteromonadales.f__Shewanellaceae.g__Shewanella" = "Shewanella",
              "k__Bacteria.p__Proteobacteria.c__Gammaproteobacteria.o__Aeromonadales.f__Aeromonadaceae.g__Aeromonas" = "Aeromonas",
              "k__Bacteria.p__Proteobacteria.c__Betaproteobacteria.o__Burkholderiales.f__Comamonadaceae.g__Delftia" = "Delftia",
              "k__Bacteria.p__Proteobacteria.c__Betaproteobacteria.o__Burkholderiales.f__Comamonadaceae.g__Comamonas" = "Comamonas",
              "k__Bacteria.p__Proteobacteria.c__Betaproteobacteria.o__Burkholderiales.f__Burkholderiaceae.g__Ralstonia" = "Ralstonia",
              "k__Bacteria.p__Proteobacteria.c__Alphaproteobacteria.o__Rhizobiales.f__Aurantimonadaceae.g__Martelella" = "Martelella",
              "k__Bacteria.p__Proteobacteria.Other.Other.Other.Other" = "Proteobacteria -",
              "k__Bacteria.p__Firmicutes.c__Bacilli.o__Bacillales.f__Bacillaceae.g__Bacillus" = "Bacillus",
              "k__Bacteria.Other.Other.Other.Other.Other" = "Bacteria -")

# Loop over patterns and replace column names
for (pattern in names(patterns)) {
  colnames(gn.abund) <- gsub(pattern, patterns[pattern], colnames(gn.abund))
}
#Add an "Other" category
gn.abund$Others = 1 - rowSums(gn.abund)
gn.treat = cbind(treat.gn[,1:11],gn.abund)
head(gn.treat)
dim(gn.treat)
gn.treat$diversity_status <- factor(gn.treat$diversity_status, 
                                   levels = c("O", "C", "N", "E", "CN", "CE", "EN", "CEN"),
                                   labels = c("BF", "CEN", "C", "N", "E", "CE", "CN", "EN"))
#--- plotting ggplot stack bars ----- #
gn.long = gather(gn.treat,Taxa,RelAbund,12:25) #transform in long format for ggplot with library 'Rmisc'
head(gn.long)
CPCOLS <- c("#33a02c", "#e31a1c", "#1f78b4", "#FF7F24", "#FFFF00", "#E3E3E3",  "#B03060","#EEDC82","#00C5CD", "#8B7765", "#FFC125",  "#030303","#EE799F", "#7AC5CD", "#FF6347")

# Define the order of Taxa levels
taxa_order <- c("Martelella", "Bacillus", "Comamonas", "Delftia", "Ralstonia", 
                "Aeromonas", "Enterobacter", "Pseudomonas", "Rahnella", 
                "Shewanella", "Gammaprot. - undef", "Bacteria -", 
                "Proteobacteria -", "Others")
# Reorder the levels of Taxa factor
gn.long$Taxa <- fct_relevel(gn.long$Taxa, taxa_order)
levels(gn.long$Taxa)
stack.gn = ggplot(gn.long, aes(fill = Taxa, y = RelAbund, x = diversity_status)) + 
   geom_bar(stat = "identity", position = "fill") +
   ylab("Relative abundance") + 
   theme_bw() +
   scale_fill_manual(values = CPCOLS, guide = guide_legend(label.theme = element_text(face = "italic", size = 8))) +
    scale_color_manual(values = CPCOLS, guide = guide_legend(label.theme = element_text(face = "italic", size = 8))) +
   facet_grid(.~ contamination + compartment ,  scales = "free_x", space = "free_x") +
   scale_y_continuous(limits = c(0,1), expand = c(0,0)) +
scale_x_discrete(name = "Food web complexity treatment * Contamination  * Soil Compartment") +
   theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1))
stack.gn
ggsave(file = here("output23", "figures", "gn_relAbund_genus.eps"), stack.gn, width = 7, units = "in")
ggsave(file = here("output23", "figures", "gn_relAbund_genus.pdf"), stack.gn, width = 7, units = "in")
ggsave(file = here("output23", "figures", "gn_relAbund_genus.svg"), stack.gn, width = 7, units = "in")
#ggsave(file = "relAbund.gn.phylum_compressed.tiff", stack, width = 7, units = "in", dpi = 600, compression = "lzw")

```
Checking the changes in relative abundance at genus level based on treatment
```{r  GENUS relative abundance ANOVA looping plus differently - gn}

genus.gn.genus.names <- colnames(genus.gn) # start cleaning the names of genus to have clearer format
genus.gn.clean <- sub('.*g__', '', genus.gn.genus.names)
genus.gn.clean.f = sub(".*f__", "", genus.gn.clean)
genus.gn.clean.o = sub(".*o__", "", genus.gn.clean.f)
genus.gn.clean.c = sub(".c__", "", genus.gn.clean.f)
genus.gn.clean.p = sub(".*p__", "", genus.gn.clean.c)
genus.gn.genus.names


colnames(genus.gn) = genus.gn.clean.p 
genus.gn.abund = genus.gn[,colMeans(genus.gn) > 0.005] # 13 ASV with more than 0.005% presence
dim(genus.gn.abund) # 183 samples recording a total of 13 ASVs
#View(genus.gn.abund[1:5,])
treat = metagn.sorted[,2:10] # keep only treatment columns. 
#View(treat)
#treat = treat[,-8]
treat$nem.cont <- as.factor(paste(treat$contamination, treat$nem, sep = "."))
treat$nem.comp <- as.factor(paste(treat$compartment, treat$nem, sep = "."))
treat$col.comp <- as.factor(paste(treat$compartment, treat$col, sep = "."))
treat$col.cont <- as.factor(paste(treat$contamination, treat$col, sep = "."))
treat$ver.cont <- as.factor(paste(treat$contamination, treat$ver, sep = "."))
treat$ver.comp <- as.factor(paste(treat$compartment, treat$ver, sep = "."))
treat$div.comp <- as.factor(paste(treat$compartment, treat$diversity_status, sep = "."))
treat$div.cont <- as.factor(paste(treat$contamination, treat$diversity_status, sep = "."))
treat$div.cont.comp <- as.factor(paste(treat$cont.comp, treat$diversity_status, sep = "."))
str(treat) # 191 samples for gn treatment variables. 

genus.treat = cbind(treat, genus.gn.abund) # put all together to perform the anovas not possible because diff number of row
treat3 <- merge(treat, genus.gn.abund, by = 0)
#View(treat3)
rownames(treat3) <- treat3$Row.names # restore row names
treat3[,1] <- NULL # erase row.names col
genus.treat = treat3

#View(genus.treat[1:5,]) # genus start at colum 18
dim(genus.treat) # 30 columns, genus start at 18
# creating a loop for ANOVAs and Tukeys of all genus at a time

18:ncol(genus.treat)
AVz <- rep(NA, ncol(genus.treat)) # creates a table with the same number of columns as in genus.treat
sink("ANOVA-Tukeys-genus.gn.txt")
for (i in 19:ncol(genus.treat)) {
        column <-  names(genus.treat[i])
        AVz <- summary(aov(genus.treat[,i]~div.cont.comp, data = genus.treat)) 
        tk <- TukeyHSD((aov(genus.treat[,i]~div.cont.comp, data = genus.treat)))
print(column)
print(AVz)
print(tk)
}
sink()

 # in this loop we select only the p values and the F vales for anova
18:ncol(genus.treat)
AVz <- rep(NA, ncol(genus.treat)) # creates a table with the same number of columns as in genus.treat
sink("ANOVA-F-P-values.genus.gn.doc")
for (i in 18:ncol(genus.treat)) {
        column <-  names(genus.treat[i])
        AVz <- summary(aov(genus.treat[,i]~div.cont.comp, data = genus.treat)) [[1]] [["F value"]] 
        AVzb <- summary(aov(genus.treat[,i]~div.cont.comp, data = genus.treat)) [[1]] [["Pr(>F)"]]
print(column)
print(AVz)
print(AVzb)
}
sink()


# Now we load the dataset into R 

table.anova.genus <- read.csv( file = "ANOVA-F-P-values.genus.doc", header = F)
dim(table.anova.genus)
#View(table.anova.genus)
taxon <- table.anova.genus[seq(from = 1, to = nrow(table.anova.genus), by = 3), 1]
f.fisher <- table.anova.genus[seq(from = 2, to = nrow(table.anova.genus), by = 3), 1]
p.value <- table.anova.genus[seq(from = 3, to = nrow(table.anova.genus), by = 3), 1]
p.value 
table.anova.genus <- data.frame(taxon, f.fisher, p.value)
write.csv(table.anova.genus, file = "table.anova.genus.gn.csv") # take out the NA and the [1] in excel for rapidity
table.anova.genus <- read.csv( file = "table.anova.genus.gn.csv", header = T)#reimport table.anova.genus wit 461 analyses
bonferroni.anova.genus <- table.anova.genus[table.anova.genus$p.value < 0.004,] # Bonferroni adjusting. We take our alpha divided by the total amount of contrasts (461) - so 0.05/13 = 0.0001
write.csv(bonferroni.anova.genus, file = "bonferroni.anova.genus.gn.csv")
table.anova.genus <- drop_na(table.anova.genus)

# Now I need to select the genus that passed the bonferroni threshold in genus.treat, so I can get the necessary exploratory analyses. 

rownames(bonferroni.anova.genus) = bonferroni.anova.genus$taxon # put taxa in row names
rownames(table.anova.genus) = table.anova.genus$taxon
genus.gn.abund.t = as.data.frame(t(genus.gn.abund)) # put taxa in rows as in bonferroni.anova.genus to have taxa in row names
#View(genus.gn.abund.t)
#genus.gn.abund.t$rownames <- rownames

#rownames = rownames(table.anova.genus)
#table.anova.genus$rownames = rownames

#genus.gn.abund.t.match.anova = merge(as.data.frame(genus.gn.abund.t), as.data.frame(table.anova.genus), by = "rownames") # select taxa with significant p value of 0.0001 in genus.gn.abund.t
 genus.gn.abund.t.match.anova = cbind(genus.gn.abund.t, table.anova.genus)
View( genus.gn.abund.t.match.anova)
dim(genus.gn.abund.t.match.anova)
rownames(genus.gn.abund.t.match.anova) = genus.gn.abund.t.match.anova$Row.names # put taxa as row names again
genus.gn.abund.t.match.anova$Row.names = NULL # Eliminate row.names column with taxa names
genus.gn.abund.t.match.anova$taxon = NULL
genus.gn.abund.t.match.anova$f.fisher = NULL
genus.gn.abund.t.match.anova$p.value = NULL
genus.gn.abund.match.anov = t(genus.gn.abund.t.match.anova) # transpose matrix 
#View(genus.gn.abund.match.anov)
# For some reason merge is not working with a single row. n

genus.gn.abund.match.anova.treat = cbind(genus.gn.abund.match.anov,treat3) # error because 194 samples instead of 191? 
#View(genus.gn.abund.match.anova.treat)
# Calculating mean relative abundance for genus that passed bonferroni based on interaction  Contamination * Compartment
percentages.mean.genus <- genus.gn.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(cont.comp) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.genus)
percentages.mean.genus <-  percentages.mean.genus %>% 
   mutate_at(2:ncol(percentages.mean.genus), round, 2)

write.table(percentages.mean.genus, file = "mean.rel.abund.genus.gn.cont.comp.txt", sep = "\t", dec = ".")


# Calculating mean relative abundance for genus that passed bonferroni based on  Contamination level
percentages.mean.genus <- genus.gn.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(contamination) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.genus)
percentages.mean.genus <-  percentages.mean.genus %>% 
   mutate_at(2:14, round, 2)

write.table(percentages.mean.genus, file = "mean.rel.abund.genus.gn.contamination.txt", sep = "\t", dec = ".")

# Calculating mean relative abundance for genus that passed bonferroni based on interaction  Compartment level
percentages.mean.genus <- genus.gn.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(compartment) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.genus)
percentages.mean.genus <-  percentages.mean.genus %>% 
   mutate_at(2:14, round, 2)

write.table(percentages.mean.genus, file = "mean.rel.abund.genus.gn.compartment.txt", sep = "\t", dec = ".")

# Calculating mean relative abundance for genus that passed bonferroni based on interaction Diversity * Contamination * Compartment
percentages.mean.genus <- genus.gn.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(div.cont.comp) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.genus)
percentages.mean.genus <-  percentages.mean.genus %>% 
   mutate_at(2:14, round, 2)

write.table(percentages.mean.genus, file = "mean.rel.abund.genus.gn.div.cont.comp.txt", sep = "\t", dec = ".")

# Calculating mean relative abundance for genus that passed bonferroni based on interaction  Earthworm level
percentages.mean.genus <- genus.gn.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(ver) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.genus)
percentages.mean.genus <-  percentages.mean.genus %>% 
   mutate_at(2:14, round, 2)
percentages.mean.genus
write.table(percentages.mean.genus, file = "mean.rel.abund.genus.gn.compartment.txt", sep = "\t", dec = ".")


# Tyding up 
rm(genus.gn.abund.t.match.anova)
rm(genus.gn.abund.match.anov)

```
Checking the changes in relative abundance at phylum level based on treatment
```{r  PHYLA relative abundance ANOVA looping plus differently - gn}

phylum.treat = cbind(treat,gn.abund) # working with gn.treat for ANOVA from chunk relative abundance stackbars- phyla-gn
tx <- with(gn.treat, interaction(gn.treat$diversity_status, gn.treat$compartment, gn.treat$contamination))



#View(gn.treat[1:5,]) # genus start at colum 18
# in this loop we select only the p values and the F vales for anova
18:ncol(phylum.treat)
AVz <- rep(NA, ncol(phylum.treat)) # creates a table with the same number of columns as in phylum.treat
sink("ANOVA-F-P-values.phylum.doc")
for (i in 18:ncol(phylum.treat)) {
        column <-  names(phylum.treat[i])
        AVz <- summary(aov(phylum.treat[,i]~div.cont.comp, data = phylum.treat)) [[1]] [["F value"]] 
        AVzb <- summary(aov(phylum.treat[,i]~div.cont.comp, data = phylum.treat)) [[1]] [["Pr(>F)"]]
print(column)
print(AVz)
print(AVzb)
}
sink()


# Now we load the dataset into R 

table.anova.phylum <- read.csv( file = "ANOVA-F-P-values.phylum.doc", header = F)
taxon <- table.anova.phylum[seq(from = 1, to = nrow(table.anova.phylum), by = 3), 1]
f.fisher <- table.anova.phylum[seq(from = 2, to = nrow(table.anova.phylum), by = 3), 1]
p.value <- table.anova.phylum[seq(from = 3, to = nrow(table.anova.phylum), by = 3), 1]
p.value 
table.anova.phylum <- data.frame(taxon, f.fisher, p.value)
write.csv(table.anova.phylum, file = "table.anova.phylum.csv") # take out the NA and the [1] in excel for rapidity
# Now go to excel and eliminate [1] and NAs
table.anova.phylum <- read.csv( file = "table.anova.phylum.csv", header = T)#reimport table.anova.phylum wit 461 analyses
bonferroni.anova.phylum <- table.anova.phylum[table.anova.phylum$p.value < 0.0035,] # Bonferroni adjusting. We take our alpha divided by the total amount of contrasts (461) - so 0.05/461 = 0.0001
write.csv(bonferroni.anova.phylum, file = "bonferroni.anova.phylum.gn.csv")

# Now I need to select the phylum that passed the bonferroni threshold in phylum.treat, so I can get the necessary exploratory analyses. 
phylum.gn.abund = gn.abund
rownames(bonferroni.anova.phylum) = bonferroni.anova.phylum$taxon # put taxa in row names
phylum.gn.abund.t = t(phylum.gn.abund) # put taxa in rows as in bonferroni.anova.phylum to have taxa in row names
phylum.gn.abund.t.match.anova = merge(phylum.gn.abund.t, bonferroni.anova.phylum, by = 0) # select taxa with significant p value of 0.0001 in phylum.gn.abund.t
rownames(phylum.gn.abund.t.match.anova) = phylum.gn.abund.t.match.anova$Row.names # put taxa as row names again
phylum.gn.abund.t.match.anova$Row.names = NULL # Eliminate row.names column with taxa names
phylum.gn.abund.t.match.anova$taxon = NULL
phylum.gn.abund.t.match.anova$f.fisher = NULL
phylum.gn.abund.t.match.anova$p.value = NULL
phylum.gn.abund.match.anov = t(phylum.gn.abund.t.match.anova) # transpose matrix 

phylum.gn.abund.match.anova.treat = cbind(phylum.gn.abund.match.anov,treat) # error because 194 samples instead of 191? 

# Calculating mean relative abundance for phylum that passed bonferroni based on interaction  Contamination * Compartment
percentages.mean.phylum <- phylum.gn.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(cont.comp) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.phylum)
percentages.mean.phylum <-  percentages.mean.phylum %>% 
   mutate_at(2:ncol(percentages.mean.phylum), round, 2)

write.table(percentages.mean.phylum, file = "mean.rel.abund.phylum.gn.cont.comp.txt", sep = "\t", dec = ".")


# Calculating mean relative abundance for phylum that passed bonferroni based on  Contamination level
percentages.mean.phylum <- phylum.gn.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(contamination) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.phylum)
percentages.mean.phylum <-  percentages.mean.phylum %>% 
   mutate_at(2:ncol(percentages.mean.phylum), round, 2)

write.table(percentages.mean.phylum, file = "mean.rel.abund.phylum.gn.contamination.txt", sep = "\t", dec = ".")

# Calculating mean relative abundance for phylum that passed bonferroni based on interaction  Compartment level
percentages.mean.phylum <- phylum.gn.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(compartment) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.phylum)
percentages.mean.phylum <-  percentages.mean.phylum %>% 
   mutate_at(2:ncol(percentages.mean.phylum), round, 2)

write.table(percentages.mean.phylum, file = "mean.rel.abund.phylum.gn.compartment.txt", sep = "\t", dec = ".")

# Calculating mean relative abundance for phylum that passed bonferroni based on interaction Diversity * Contamination * Compartment
percentages.mean.phylum <- phylum.gn.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(div.cont.comp) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.phylum)
percentages.mean.phylum <-  percentages.mean.phylum %>% 
   mutate_at(2:ncol(percentages.mean.phylum), round, 2)

write.table(percentages.mean.phylum, file = "mean.rel.abund.phylum.gn.div.cont.comp.txt", sep = "\t", dec = ".")

# Calculating mean relative abundance for phylum that passed bonferroni based on interaction  Earthworm level
percentages.mean.phylum <- phylum.gn.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(ver) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.phylum)
percentages.mean.phylum <-  percentages.mean.phylum %>% 
   mutate_at(2:ncol(percentages.mean.phylum), round, 2)

write.table(percentages.mean.phylum, file = "mean.rel.abund.phylum.gn.compartment.txt", sep = "\t", dec = ".")


# Tyding up 
rm(phylum.gn.abund.t.match.anova)
rm(phylum.gn.abund.match.anov)
```


## Gram Positive

Relative abundance stack bars graphs

```{r Relative abundance stackbars - genus - gp}
# ordering and checking
phylum.gp <- phylum.gp[order(row.names(phylum.gp)),]
genus.gp <- genus.gp[order(row.names(genus.gp)),]
row.names(treat) = treat$code
treat.gp <- treat[order(row.names(treat)),]
row.names(phylum.gp)
phylum.gp <- phylum.gp[rownames(phylum.gp) %in% rownames(treat.gp),]
treat.gp <- treat.gp[rownames(treat.gp) %in% rownames(phylum.gp),]
treat.gp <- treat.gp[rownames(treat.gp) %in% rownames(genus.gp),]
row.names(phylum.gp) == row.names(genus.gp)
row.names(treat.gp) == row.names(phylum.gp)
row.names(treat.gp) == row.names(genus.gp)

gp = genus.gp
gp.abund = gp[,colMeans(gp) > 0.005]
colnames(gp.abund)

# Define patterns and replacement strings
patterns <- c("k__Bacteria.Other.Other.Other.Other.Other" = "Bacteria -",
              "k__Bacteria.p__Actinobacteria.c__Actinobacteria.Other.Other.Other" = "Actinobacteriota -",
              "k__Bacteria.p__Actinobacteria.c__Actinobacteria.o__Actinobacteria.undef.f__Actinobacteria.undef.g__Actinobacteria.undef" = "Actinobacteriota undef.",
              "k__Bacteria.p__Actinobacteria.c__Actinobacteria.o__Corynebacteriales.f__Mycobacteriaceae.g__Mycobacterium" = "Mycobacterium",
              "k__Bacteria.p__Actinobacteria.c__Actinobacteria.o__Micrococcales.Other.Other" = "Micrococcales -",
              "k__Bacteria.p__Actinobacteria.c__Actinobacteria.o__Micrococcales.f__Microbacteriaceae.g__Microbacterium" = "Microbacterium",
              "k__Bacteria.p__Proteobacteria.Other.Other.Other.Other" = "Proteobacteriota -")

# Loop over patterns and replace column names
for (pattern in names(patterns)) {
  colnames(gp.abund) <- gsub(pattern, patterns[pattern], colnames(gp.abund))
}
#Add an "Other" category
gp.abund$Others = 1 - rowSums(gp.abund)
gp.treat = cbind(treat.gp[,1:11],gp.abund)
head(gp.treat)
dim(gp.treat) # 19
gp.treat$diversity_status <- factor(gp.treat$diversity_status, 
                                   levels = c("O", "C", "N", "E", "CN", "CE", "EN", "CEN"),
                                   labels = c("BF", "CEN", "C", "N", "E", "CE", "CN", "EN"))
#--- plotting ggplot stack bars ----- #
gp.long = gather(gp.treat,Taxa,RelAbund,12:ncol(gp.treat)) #transform in long format for ggplot with library 'Rmisc'
head(gp.long)
CPCOLS <- c("#33a02c", "#e31a1c", "#1f78b4", "#FFC125", "#00C5CD","#8B7765", "#FFFF00", "#030303")#"#E3E3E3",  "#B03060","#EEDC82",  ,"#EE799F", "#7AC5CD", "#FF6347")

# Define the order of Taxa levels
taxa_order <- c("Micrococcales -", "Actinobacteriota undef.", "Microbacterium", "Mycobacterium", "Actinobacteriota -", 
                "Bacteria -", "Proteobacteriota -", "Others")
# Reorder the levels of Taxa factor
gp.long$Taxa <- fct_relevel(gp.long$Taxa, taxa_order)
levels(gp.long$Taxa)
stack.gp = ggplot(gp.long, aes(fill = Taxa, y = RelAbund, x = diversity_status)) + 
   geom_bar(stat = "identity", position = "fill") +
   ylab("Relative abundance") + 
   theme_bw() +
   scale_fill_manual(values = CPCOLS, guide = guide_legend(label.theme = element_text(face = "italic", size = 8))) +
    scale_color_manual(values = CPCOLS, guide = guide_legend(label.theme = element_text(face = "italic", size = 8))) +
   facet_grid(.~ contamination + compartment ,  scales = "free_x", space = "free_x") +
   scale_y_continuous(limits = c(0,1), expand = c(0,0)) +
scale_x_discrete(name = "Food web complexity treatment * Contamination  * Soil Compartment") +
   theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1))
stack.gp
ggsave(file = here("output23", "figures", "gp_relAbund_genus.eps"), stack.gp, width = 7, units = "in")
ggsave(file = here("output23", "figures", "gp_relAbund_genus.pdf"), stack.gp, width = 7, units = "in")
ggsave(file = here("output23", "figures", "gp_relAbund_genus.svg"), stack.gp, width = 7, units = "in")
#ggsave(file = "relAbund.gp.phylum_compressed.tiff", stack, width = 7, units = "in", dpi = 600, compression = "lzw")
```




Checking the changes in relative abundance at genus level based on treatment
```{r  GENUS relative abundance ANOVA looping plus differently - gp}
genus.gp.genus.names <- colnames(genus.gp) # start cleaning the names of genus to have clearer format
genus.gp.clean <- sub('.*g__', '', genus.gp.genus.names)
genus.gp.clean.f = sub(".*f__", "", genus.gp.clean)
genus.gp.clean.o = sub(".*o__", "", genus.gp.clean.f)
genus.gp.clean.c = sub(".c__", "", genus.gp.clean.f)
genus.gp.clean.p = sub(".*p__", "", genus.gp.clean.c)
colnames(genus.gp) = genus.gp.clean.p 
genus.gp.abund = genus.gp[,colMeans(genus.gp) > 0.005] # 461 ASV with more than 0.01% presence
treat = metagp.sorted[,2:10]
treat2 = metagp.sorted[,31:39]# keep only treatment columns. 
treat = cbind(treat,treat2)


str(treat) # 192 samples for gp treatment variables. 

genus.treat = cbind(treat, genus.gp.abund) # put all together to perform the anovas problem with number of rows, genus.gp.abund = 185 instead of 192
genus.treat = merge(treat, genus.gp.abund, by = 0)
rownames(genus.treat) = genus.treat$Row.names
dim(genus.treat)(185*26)
#View(genus.treat[1:5,]) # genus start at colum 18

# creating a loop for ANOVAs and Tukeys of all genus at a time

20:ncol(genus.treat)
AVz <- rep(NA, ncol(genus.treat)) # creates a table with the same number of columns as in genus.treat
sink("ANOVA-Tukeys-genus.txt")
for (i in 20:ncol(genus.treat)) {
        column <-  names(genus.treat[i])
        AVz <- summary(aov(genus.treat[,i]~div.cont.comp, data = genus.treat)) 
        tk <- TukeyHSD((aov(genus.treat[,i]~div.cont.comp, data = genus.treat)))
print(column)
print(AVz)
print(tk)
}
sink()

 # in this loop we select only the p values and the F vales for anova
20:ncol(genus.treat)
AVz <- rep(NA, ncol(genus.treat)) # creates a table with the same number of columns as in genus.treat
sink("ANOVA-F-P-values.genus.doc")
for (i in 20:ncol(genus.treat)) {
        column <-  names(genus.treat[i])
        AVz <- summary(aov(genus.treat[,i]~div.cont.comp, data = genus.treat)) [[1]] [["F value"]] 
        AVzb <- summary(aov(genus.treat[,i]~div.cont.comp, data = genus.treat)) [[1]] [["Pr(>F)"]]
print(column)
print(AVz)
print(AVzb)
}
sink()


# Now we load the dataset into R 

table.anova.genus <- read.csv( file = "ANOVA-F-P-values.genus.doc", header = F)
taxon <- table.anova.genus[seq(from = 1, to = nrow(table.anova.genus), by = 3), 1]
f.fisher <- table.anova.genus[seq(from = 2, to = nrow(table.anova.genus), by = 3), 1]
p.value <- table.anova.genus[seq(from = 3, to = nrow(table.anova.genus), by = 3), 1]
p.value 
table.anova.genus <- data.frame(taxon, f.fisher, p.value)
write.csv(table.anova.genus, file = "table.anova.genus.csv") # take out the NA and the [1] in excel for rapidity
table.anova.genus <- read.csv( file = "table.anova.genus.csv", header = T)#reimport table.anova.genus wit 461 analyses
bonferroni.anova.genus <- table.anova.genus[table.anova.genus$p.value < 0.007,] # Bonferroni adjusting. We take our alpha divided by the total amount of contrasts (7) - so 0.05/7 = 0.0001
write.csv(bonferroni.anova.genus, file = "bonferroni.anova.genus.gp.csv")

###

 genus.gp.abund.t.match.anova = cbind(genus.gp.abund.t, table.anova.genus)
#View( genus.gp.abund.t.match.anova)
dim(genus.gp.abund.t.match.anova)
rownames(genus.gp.abund.t.match.anova) = genus.gp.abund.t.match.anova$Row.names # put taxa as row names again
genus.gp.abund.t.match.anova$Row.names = NULL # Eliminate row.names column with taxa names
genus.gp.abund.t.match.anova$taxon = NULL
genus.gp.abund.t.match.anova$f.fisher = NULL
genus.gp.abund.t.match.anova$p.value = NULL
genus.gp.abund.match.anov = t(genus.gp.abund.t.match.anova) # transpose matrix 
#View(genus.gp.abund.match.anov)
# For some reason merge is not working with a single row. n

#genus.gn.abund.match.anova.treat = cbind(genus.gp.abund.match.anov,treat) # error because 194 samples instead of 191? - Didn¡t work use merge
genus.gn.abund.match.anova.treat = merge(treat, genus.gp.abund.match.anov, by = 0)
rownames(genus.gn.abund.match.anova.treat) = genus.gn.abund.match.anova.treat$Row.names
genus.gp.abund.match.anova.treat = genus.gn.abund.match.anova.treat
#View(genus.gp.abund.match.anova.treat)

# Calculating mean relative abundance for genus that passed bonferroni based on interaction  Contamination * Compartment
percentages.mean.genus <- genus.gp.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(cont.comp) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.genus)
percentages.mean.genus <-  percentages.mean.genus %>% 
   mutate_at(2:ncol(percentages.mean.genus), round, 2)

write.table(percentages.mean.genus, file = "mean.rel.abund.genus.gp.cont.comp.txt", sep = "\t", dec = ".")


# Calculating mean relative abundance for genus that passed bonferroni based on  Contamination level
percentages.mean.genus <- genus.gp.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(contamination) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.genus)
percentages.mean.genus <-  percentages.mean.genus %>% 
   mutate_at(2:ncol(percentages.mean.genus), round, 2)

write.table(percentages.mean.genus, file = "mean.rel.abund.genus.gp.contamination.txt", sep = "\t", dec = ".")

# Calculating mean relative abundance for genus that passed bonferroni based on interaction  Compartment level
percentages.mean.genus <- genus.gp.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(compartment) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.genus)
percentages.mean.genus <-  percentages.mean.genus %>% 
   mutate_at(2:ncol(percentages.mean.genus), round, 2)

write.table(percentages.mean.genus, file = "mean.rel.abund.genus.gp.compartment.txt", sep = "\t", dec = ".")

# Calculating mean relative abundance for genus that passed bonferroni based on interaction Diversity * Contamination * Compartment
percentages.mean.genus <- genus.gp.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(div.cont.comp) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.genus)
percentages.mean.genus <-  percentages.mean.genus %>% 
   mutate_at(2:ncol(percentages.mean.genus), round, 2)

write.table(percentages.mean.genus, file = "mean.rel.abund.genus.gp.div.cont.comp.txt", sep = "\t", dec = ".")

# Calculating mean relative abundance for genus that passed bonferroni based on interaction  Earthworm level
percentages.mean.genus <- genus.gp.abund.match.anova.treat %>% 
   dplyr::mutate_if(is.numeric, funs(. * 100)) %>% 
   dplyr::group_by(ver) %>% 
   summarize_if(is.numeric, mean)

dim(percentages.mean.genus)
percentages.mean.genus <-  percentages.mean.genus %>% 
   mutate_at(2:ncol(percentages.mean.genus), round, 2)

write.table(percentages.mean.genus, file = "mean.rel.abund.genus.gp.compartment.txt", sep = "\t", dec = ".")


# Tyding up 
rm(genus.gp.abund.t.match.anova)
rm(genus.gp.abund.match.anov)

```

# ----------------------------------------------
# 2.4. PAH-RHD QPCR

### Linear regression
Only for contaminated pots 
```{r}
meta.phe.out
par(mfrow = c(1,1))
hist(meta.phe.out$biomass)
hist(log(meta.phe.out$biomass))
shapiro.test(log(meta.phe.out$biomass))  # W = 0.95988, p-value = 0.006751
qqnorm(log(meta.phe.out$biomass))
qqline(log(meta.phe.out$biomass))
plot(meta.phe.out$biomass)
```
### GN regression 
```{r}
model.gn.M.full = lm(gn.M.copies ~ compartment + phe + biomass + diversity_status, data = meta.phe.out)
summary(aov(model.gn.M.full)) # Only Compartment and phe are significant, reduce the model
#summary(model.gn.M.full)
model.gn.M.reduced = lm(gn.M.copies ~ compartment + phe, data = meta.phe.out)
summary(aov(model.gn.M.reduced)) # ANOVA
summary(model.gn.M.reduced) # Estimates
capture.output(summary(aov(model.gn.M.reduced)), file = here::here("output23", "tables", "models", "gn-million-copies-model-anova.csv"))
capture.output(summary(model.gn.M.reduced), file = here::here("output23", "tables", "models", "gn-million-copies-model-estimates.csv"))
```

### GP regression 
```{r}
model.gp.M.full = lm(gp.M.copies ~ compartment + phe + biomass + diversity_status, data = meta.phe.out)
summary(aov(model.gp.M.full)) # Only Compartment and biomass are significant, reduce the model
#summary(model.gp.M.full)
model.gp.M.reduced = lm(gp.M.copies ~ compartment + biomass, data = meta.phe.out)
summary(aov(model.gp.M.reduced)) # ANOVA
summary(model.gp.M.reduced) # Estimates
capture.output(summary(aov(model.gp.M.reduced)), file = here::here("output23", "tables", "models", "gp-million-copies-model-anova.csv"))
capture.output(summary(model.gp.M.reduced), file = here::here("output23", "tables", "models", "gp-million-copies-model-estimates.csv"))
```

